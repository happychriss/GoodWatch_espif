/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 07.11.2022 20:28:54

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 3536;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,832 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0032935049384832382, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4] = { 1, 1, 26, 32, };
const TfArray<1, int> tensor_dimension1 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data2[4] = { 1, 26, 1, 32, };
const TfArray<1, int> tensor_dimension2 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data3[4] = { 1, 1, 13, 32, };
const TfArray<1, int> tensor_dimension3 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data4[4] = { 1, 13, 1, 64, };
const TfArray<1, int> tensor_dimension4 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data5[2] = { -1, 448, };
const TfArray<1, int> tensor_dimension5 = { 1, { 2 } };
const ALIGN(16) int8_t tensor_data6[32*1*3*32] = { 
  /* [0][0][][] */ 28,-5,21,9,-62,-33,-35,-35,-46,-33,127,47,21,-27,-36,-35,23,61,96,50,19,-9,-76,-54,-67,30,15,-26,-27,24,32,70, -28,-42,-1,7,-56,-76,-67,-77,-75,-1,100,71,66,-9,-13,11,33,82,71,65,13,10,-49,-54,-57,59,56,9,-8,37,28,74, -6,-45,-10,-30,-84,-58,-96,-57,-45,-29,84,48,33,-17,-30,-13,41,45,107,60,53,12,-41,-49,-19,66,53,-17,-7,10,29,60, 
  /* [1][0][][] */ 52,-21,-23,-5,-4,-25,40,50,64,24,25,29,71,64,102,2,22,16,4,22,6,50,5,-6,-10,-52,-50,-31,0,44,40,116, 28,-71,-43,-70,-49,-46,41,75,53,-5,19,26,21,59,72,-39,-53,4,-9,26,24,39,-31,-40,10,-14,-38,-32,7,75,82,127, -32,-31,-22,-24,-19,-66,5,58,46,6,-21,-13,-35,25,8,-24,-67,-12,-26,40,5,21,-17,-29,5,-51,-68,-72,-27,19,17,63, 
  /* [2][0][][] */ 5,-110,-32,70,44,-59,-33,-97,61,-29,-95,-80,-71,35,37,-74,-26,-16,-10,74,-109,58,-53,37,-77,76,-95,-65,90,8,92,-12, 11,-74,69,70,16,14,11,51,37,-18,-61,-105,-77,-68,-27,-88,-88,21,-6,-127,-14,-112,48,-85,-67,-23,15,14,60,-36,69,-88, -5,66,-77,-96,30,-10,25,13,52,73,51,82,-57,-30,78,-68,-104,48,-94,-62,38,-54,31,9,54,-35,82,2,24,-118,28,-88, 
  /* [3][0][][] */ 27,98,41,50,47,9,-34,-1,8,-70,-61,-68,12,36,35,32,-26,-33,-113,-87,-12,-13,3,54,63,22,-41,-90,-75,-61,-13,-23, 66,64,81,72,58,2,-46,15,-9,-43,-62,-63,20,66,65,24,21,-33,-65,-46,-25,-29,7,85,82,-13,-28,-92,-56,-26,7,-18, 91,127,82,78,90,25,-74,1,-2,-44,-57,-33,7,35,60,55,12,-39,-101,-97,-45,-21,-8,54,31,36,-16,-48,-56,-38,13,5, 
  /* [4][0][][] */ -4,70,-74,10,9,2,11,66,60,57,-48,31,-16,-96,47,-42,1,-18,-66,20,-64,40,12,30,-86,21,70,44,15,48,36,13, -69,48,60,44,-30,6,-43,23,73,-40,-5,-84,-91,-37,-37,37,22,-78,-54,47,-56,1,-69,-89,-58,-35,27,-8,-57,57,-61,-48, -42,-44,5,-75,-12,-85,-82,-90,-73,-25,30,-80,-127,-110,-125,-12,-49,-107,-117,-80,37,-85,-35,-70,-66,55,-44,-35,61,45,69,7, 
  /* [5][0][][] */ 36,-12,35,85,35,-20,-9,-52,-109,-14,-75,-36,-107,-79,26,-93,-33,-87,-13,-127,-14,7,75,42,44,-21,52,46,-118,-77,-34,-97, 89,-71,52,11,-52,14,-10,87,5,-52,-80,-44,66,-74,-116,-19,-117,-55,-117,-127,14,-34,52,-96,-94,11,-94,34,30,-99,-92,69, -52,55,-41,-80,-70,77,49,3,2,-126,-96,-91,32,-111,-115,-48,-71,-78,55,-27,-49,-55,38,14,18,-49,59,43,0,27,4,-92, 
  /* [6][0][][] */ -46,-12,-14,5,14,-3,27,56,36,9,2,26,33,-3,-12,-36,-69,-100,-126,-77,-70,67,57,-21,-71,43,41,81,71,89,57,42, -65,-12,40,32,10,-22,-11,-12,-15,24,21,80,64,39,-14,-35,-65,-111,-127,-36,-48,94,74,-3,-40,37,52,51,77,88,41,18, -103,-12,5,15,-28,-38,-15,-7,-32,2,-24,57,35,67,15,-66,-56,-113,-91,-33,-14,62,66,-18,-37,38,77,41,84,66,51,34, 
  /* [7][0][][] */ -4,-39,-28,-19,-43,12,62,53,46,40,21,21,48,-43,-47,-25,-15,43,84,60,-2,-7,-62,-22,10,4,-22,-27,-38,-76,-79,-101, 5,-30,-10,-14,-7,47,60,69,67,79,53,90,56,-16,-15,-12,4,60,127,95,37,-4,-55,-37,38,28,9,34,-19,-26,-81,-98, 24,-64,-26,-12,-25,53,57,77,58,68,54,55,-7,-32,-58,-32,-22,60,113,90,23,6,-6,3,66,-8,4,0,-17,-57,-88,-99, 
  /* [8][0][][] */ 7,-81,-62,-26,-37,-12,23,0,7,-6,60,23,-30,-94,-100,-56,-81,9,12,11,-3,-3,-86,-62,-74,-24,0,14,-9,7,-5,62, 1,-127,-97,-112,-49,-8,-20,22,49,35,85,1,-7,-55,-89,-48,-35,-6,6,21,-2,-20,-85,-76,-39,-32,-51,-42,-38,-39,-68,10, 9,-77,-24,-37,15,29,16,52,81,89,101,47,9,-35,-12,-27,16,100,77,107,92,70,7,-9,31,-3,20,15,26,-17,0,37, 
  /* [9][0][][] */ -3,-95,-15,-25,-40,-12,-11,57,11,29,117,83,49,-59,-15,35,51,39,64,52,-4,-72,-67,-56,-63,-22,8,-4,14,16,-21,28, -40,-113,-24,-83,-89,-49,-32,55,63,32,127,29,17,-85,-53,-84,12,63,45,-27,-19,-28,-79,-68,-5,12,-4,29,-24,-49,-1,-2, 9,-90,-79,-57,-71,-39,-28,5,-41,10,115,-20,-37,-85,-40,-63,-31,17,-4,-37,5,-48,-88,-75,-33,15,-40,-73,-4,-37,-21,-4, 
  /* [10][0][][] */ -104,-104,-66,13,-22,-12,-59,-45,-100,-62,-89,64,-79,-34,-55,-68,-13,-38,-52,31,-121,-94,-125,45,-2,-67,-29,-117,-29,-102,-68,69, -29,-70,4,-21,-4,45,-53,78,-98,-73,65,-48,11,-89,-68,-5,-2,32,47,-98,15,-85,-30,12,-66,70,47,-13,52,16,-87,-44, -63,-127,-83,-95,-52,-59,-80,81,-60,-118,32,40,46,23,8,-106,-47,36,-43,-37,-89,-25,3,-55,-73,63,-37,-118,-15,5,8,-91, 
  /* [11][0][][] */ 20,-56,-26,-18,12,-2,57,60,47,72,71,81,12,39,67,48,33,-4,-53,-126,-84,-50,-49,2,8,-45,-47,-19,33,32,-6,18, 14,-59,-41,-24,11,-73,52,28,25,57,61,57,19,66,66,56,25,7,-81,-127,-104,-55,-58,-13,25,-34,-70,-6,0,8,-32,-33, 10,-59,-42,-39,4,-39,32,8,-2,63,81,57,45,52,63,48,35,51,-10,-72,-62,-36,-29,10,37,-6,-25,28,24,32,22,-4, 
  /* [12][0][][] */ 39,-30,45,73,-41,-27,26,-91,-51,85,34,6,9,-29,-65,-84,67,9,-17,-86,-28,-64,12,2,-16,-32,-69,-59,-9,34,-26,29, 70,-85,11,57,18,-67,41,-54,-53,-12,3,-127,-81,7,4,-118,37,25,-18,30,-107,-30,15,-28,-83,63,-34,-42,-112,80,50,38, -49,-43,-76,34,27,-20,4,-44,-57,-111,-28,-57,-81,73,-107,-69,-73,-74,33,18,-46,49,76,71,-69,32,31,-46,33,-62,24,-27, 
  /* [13][0][][] */ 20,55,-30,-11,66,98,4,40,29,-77,-115,-20,20,39,-6,-35,-21,18,-30,7,-25,-31,-36,19,28,-38,-4,46,35,7,-37,-80, 74,95,31,39,101,39,55,84,70,-60,-127,-29,20,94,40,43,-2,-63,-86,-36,-80,-62,-30,-3,43,-70,-71,27,62,0,-34,-103, 58,77,57,69,122,106,90,65,67,-57,-120,-33,13,80,66,5,15,-30,-64,-82,-73,-58,2,14,68,-19,-37,7,38,30,-6,-94, 
  /* [14][0][][] */ -86,-34,76,-58,-45,-8,-114,-93,75,-113,-79,11,-42,-14,2,44,-73,-50,-111,62,59,-60,51,-7,-90,-21,-117,-64,51,-49,57,19, -112,-18,38,-60,-14,12,-1,19,-123,14,78,-76,29,67,-63,-88,-115,-46,32,-58,-121,39,38,-106,-62,82,-27,18,-127,83,5,-53, -23,-73,50,-39,57,41,27,-65,55,66,-90,-34,7,-65,56,-89,-64,-47,-96,-83,-12,-60,29,106,-56,-21,22,-24,60,59,-106,-108, 
  /* [15][0][][] */ 7,-14,8,16,20,12,8,38,17,18,78,41,14,-81,-42,-9,67,97,127,68,-13,-41,-43,-30,-13,49,55,70,41,3,1,-2, 51,23,-38,-31,-18,-21,-12,13,2,4,71,45,-31,-77,-37,14,43,95,97,6,-17,-78,-92,-51,-45,-2,-16,10,-37,-60,-26,-84, 41,9,-20,-18,-59,-25,-43,-29,-42,37,60,16,-14,-91,-25,21,49,56,100,48,-29,-59,-48,-44,-14,30,28,24,13,-35,-19,-40, 
  /* [16][0][][] */ -17,-52,-29,-32,-57,-29,-54,-53,-31,35,127,50,-9,-28,-10,17,21,22,37,-30,-24,11,-46,-30,-54,12,14,-9,-6,11,16,-11, -25,-51,-12,-21,-37,-36,-54,-42,-37,36,119,89,51,-12,-10,32,24,64,42,-3,-10,-1,-23,-5,-29,31,20,-2,13,-6,-31,-8, 37,-1,11,10,-28,-19,-17,-26,-31,48,111,64,37,23,39,19,17,28,25,6,1,15,6,2,-34,46,38,2,-10,-6,-14,-21, 
  /* [17][0][][] */ -67,-9,4,-45,18,-81,-15,-41,-63,1,-14,70,-26,-58,-53,77,-55,-76,-67,84,1,-35,-54,-82,-77,-103,38,-108,-10,47,-7,-46, -117,-42,48,-29,40,73,-15,-14,74,81,46,75,-65,-123,26,-101,7,29,54,-61,-67,38,11,-70,-110,-111,-39,-14,48,-72,-32,-23, 45,-9,-111,-53,85,65,67,-85,-112,-127,-117,-32,-76,20,13,-79,-23,57,-99,48,-118,-77,67,20,-107,-85,17,-54,8,-42,57,18, 
  /* [18][0][][] */ -14,-21,-14,-20,-13,-12,-24,-8,0,52,30,-46,17,30,4,-42,-66,-80,-98,-89,14,89,69,16,-7,14,22,-19,12,23,-1,4, 12,27,35,30,33,15,8,12,29,44,6,-9,-5,35,27,-12,-52,-60,-127,-83,19,96,86,30,27,-18,-5,-2,2,22,-16,-17, 20,26,34,17,45,9,-8,-21,2,27,-3,9,8,29,12,9,-38,-78,-89,-74,5,53,83,40,23,-29,19,-9,0,28,8,4, 
  /* [19][0][][] */ -51,-25,9,76,-121,77,-46,-3,-51,-29,8,66,-127,-66,-40,57,-42,66,-7,72,91,60,9,49,18,-103,-126,-100,46,68,-65,-43, -61,17,-7,72,-121,-121,-76,65,-77,63,-119,-46,78,-3,-52,-106,-61,71,-15,29,40,-119,-106,-116,-23,-57,-56,-84,15,-38,-36,-110, 17,60,-81,27,-28,0,92,31,-23,99,22,-21,57,-30,-15,-52,96,100,73,-19,-81,-53,44,18,-37,-46,31,-35,84,-104,-47,-115, 
  /* [20][0][][] */ -23,-49,-28,-36,-67,-33,-16,16,-4,56,52,18,9,-6,-7,-85,-75,-76,-53,-9,17,9,7,-46,-49,29,7,-39,-9,10,8,-12, -47,-49,-28,-33,-58,-66,-54,1,-30,38,11,42,-20,-37,-50,-80,-113,-124,-67,-13,30,83,42,-20,-24,30,36,-10,10,-19,-36,-9, -57,-50,-28,-41,-80,-50,-9,-36,-19,10,-13,-13,-34,-21,-49,-83,-120,-127,-61,-19,-15,110,84,27,10,41,81,-29,24,-6,10,-11, 
  /* [21][0][][] */ -74,-95,-71,-79,-84,-3,25,21,-2,-31,-103,15,-62,-82,-11,-10,-14,-69,-41,-14,3,63,67,38,19,28,33,-4,12,6,9,23, -105,-3,-16,20,-80,-17,-7,-16,-13,6,-39,37,42,-20,-10,-22,-1,-81,-47,44,90,112,120,14,-7,16,55,25,26,28,8,51, -101,0,-2,-18,-57,-30,2,-39,-44,-20,-45,0,62,33,-30,-37,-10,-91,-12,72,46,127,109,25,-36,49,43,14,8,21,3,27, 
  /* [22][0][][] */ -127,104,-65,23,-13,-5,-100,-123,-20,-91,-52,-57,12,-108,-113,90,-100,16,-14,-28,37,83,20,-24,-22,-32,67,-28,79,61,-98,-96, 69,-67,-87,16,69,31,-46,-124,-109,55,-67,54,-23,112,-45,24,-71,63,-64,-60,47,-68,-72,42,25,-4,-66,-73,-20,-7,32,-69, 51,77,-73,-105,53,31,-61,-50,-108,83,-125,75,-40,-92,-56,-54,-32,-65,-38,-45,65,-54,65,54,-61,-105,-111,-44,95,4,-64,-40, 
  /* [23][0][][] */ -45,-48,-107,-19,65,80,-81,-96,-49,33,-39,69,-50,47,11,86,52,25,-126,28,-107,56,-126,-68,-63,-36,72,-89,1,-16,52,-30, -64,-49,-56,2,-16,-32,-96,-3,17,-77,56,-80,-70,-68,-46,1,14,-38,-79,55,-81,96,92,-50,-108,-124,-112,-104,-62,-21,-118,13, -101,14,-62,46,50,-26,-27,85,-13,86,-86,-123,66,-102,88,-126,-74,-67,-113,51,79,0,61,-92,-3,-5,70,-39,27,61,-127,-52, 
  /* [24][0][][] */ 20,33,10,-10,-16,19,5,-9,-5,-92,-118,-76,-17,-28,-42,-49,-17,9,56,70,3,-48,-41,-20,15,-28,-8,40,15,0,-1,-2, 1,9,29,10,30,33,28,17,18,-50,-90,-34,-36,-36,-38,-23,-8,39,109,101,43,-54,-33,-13,-10,-10,12,83,40,30,27,21, -28,5,16,28,-11,26,51,25,28,-42,-99,-40,-16,-21,-19,-39,26,61,110,127,26,-90,-58,-35,-30,-26,-18,51,12,-3,-12,-14, 
  /* [25][0][][] */ -78,-92,-99,49,-36,-99,9,-61,-70,-11,5,-64,36,-105,-62,25,-86,62,62,80,75,-114,-11,73,-92,22,-79,5,19,-21,-20,-52, -41,93,68,-28,14,-78,-55,-24,-12,-53,56,-112,-102,-94,45,37,25,74,-2,-70,-124,-106,-67,-40,-6,29,-127,-35,80,32,-9,-86, -117,-80,-16,-70,-77,-105,-43,25,57,-103,-80,-41,21,10,-117,-18,70,-66,64,-52,-74,-2,69,8,-29,-97,63,15,-13,7,-56,47, 
  /* [26][0][][] */ 82,72,87,-126,51,42,-114,3,41,-35,35,-113,-75,-75,22,-15,69,21,-92,-21,-28,30,-59,-73,-56,-14,14,19,61,-127,32,-7, -109,53,-70,32,-126,-82,-117,-49,-115,-102,-127,62,-37,35,85,-105,-101,-25,0,-67,-97,-28,41,-9,-78,16,93,-26,-96,-38,-87,53, -54,-106,-80,83,-25,35,40,9,-100,-98,-115,-42,-97,25,-50,-123,-63,81,-58,38,28,-121,-93,35,-7,21,52,11,-106,58,-123,-46, 
  /* [27][0][][] */ 97,64,12,-76,-66,-99,-38,-5,-10,-101,-99,22,47,100,-100,-112,-26,-93,-29,-121,-85,8,63,-102,59,-122,83,-112,59,82,-18,69, 81,-112,57,93,8,-37,-34,-51,24,91,27,46,-18,98,-103,-87,-73,87,71,-44,3,59,35,79,-58,8,43,-26,-106,89,-125,-112, -56,20,4,62,38,51,-58,14,-65,7,-88,90,64,85,-81,-28,64,-127,43,-103,-52,-44,-77,63,-11,3,11,-48,1,42,-51,18, 
  /* [28][0][][] */ 34,-21,13,-18,-68,7,-48,-15,-18,19,85,2,-52,-3,44,94,117,106,48,12,-9,-23,-103,-96,-26,-35,-12,-16,24,54,82,127, -41,-34,-46,-41,-98,-111,-82,5,4,-23,61,-59,-39,-24,-16,32,58,90,20,41,-11,-54,-101,-80,-77,-34,5,0,-2,75,78,79, 22,-49,-57,-32,-101,-116,-37,-15,-10,-18,80,46,7,-14,-12,36,81,29,50,17,1,-9,-77,-75,-56,-28,-13,-62,29,26,41,81, 
  /* [29][0][][] */ 5,-58,-51,-49,-6,25,55,98,103,84,36,-8,-43,-4,-48,-62,-63,-25,6,86,110,125,74,-10,-53,-51,-29,-37,-24,46,62,103, -22,-54,-79,-73,-36,37,54,113,114,46,-26,-61,-6,3,-5,-72,-101,-97,-50,41,92,107,47,-17,-31,-44,-27,-38,-36,20,29,91, 4,17,-11,-34,-19,56,47,59,65,72,-27,-54,-23,-72,-59,-83,-127,-57,-7,49,99,88,66,7,-63,-34,-37,-65,-29,4,1,29, 
  /* [30][0][][] */ 16,41,48,44,18,58,23,7,44,-19,-52,0,73,124,89,49,1,37,5,31,-25,-54,-37,45,89,-18,-84,-83,-36,-54,-97,-123, 45,12,34,68,90,21,50,-16,-10,-72,-127,-28,41,80,106,47,22,10,8,33,-44,-92,-45,71,103,-5,-85,-23,-28,-47,-79,-109, 45,38,76,74,81,62,52,9,17,-81,-106,-16,33,55,67,4,-34,45,-11,3,-69,-84,-27,48,63,0,-61,-53,-25,-46,-65,-122, 
  /* [31][0][][] */ 77,64,-6,35,-77,75,-101,-67,-83,9,36,44,1,-116,-106,-90,-50,-11,-117,-93,-55,55,-51,20,-48,-56,34,-64,22,51,-8,-84, 39,58,-22,16,-72,38,51,-102,41,-107,-119,-117,-77,78,-99,-64,64,62,-59,-12,-53,49,63,-106,-94,-21,-98,63,33,-31,-71,-118, 41,36,-89,16,64,-118,-80,47,-78,-72,27,70,-78,-18,-69,-43,51,-66,-71,78,-63,54,42,-95,-89,-105,62,-38,76,-127,-96,49, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,3,32 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0096250614151358604, 0.010193675756454468, 0.0016483127838000655, 0.0089119765907526016, 0.0021541472524404526, 0.0016002317424863577, 0.0092263976112008095, 0.0093221887946128845, 0.0070086210034787655, 0.0051260571926832199, 0.0017042448744177818, 0.011823379434645176, 0.0018326918361708522, 0.0075873308815062046, 0.0015772937331348658, 0.011957685463130474, 0.011835241690278053, 0.0016143150860443711, 0.011376739479601383, 0.0015979052986949682, 0.0070900754071772099, 0.009334673173725605, 0.0015206831740215421, 0.0015679931966587901, 0.012973581440746784, 0.00177034642547369, 0.0015562751796096563, 0.0015869165072217584, 0.0085424520075321198, 0.0084649147465825081, 0.007940635085105896, 0.0016666818410158157, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[32] = { -24445, -20731, -6298, 7083, -18205, -5528, -33905, -30240, -16633, -14922, -9023, -2854, -7249, -20717, -6131, -2530, 2054, -5747, -20306, -3556, -22564, -15616, -2833, -4935, -972, 622, -5383, -11558, 7936, -18924, -13858, -7636, };
const TfArray<1, int> tensor_dimension7 = { 1, { 32 } };
const TfArray<32, float> quant7_scale = { 32, { 3.1700186809757724e-05, 3.3572920074220747e-05, 5.4287261264107656e-06, 2.935163865913637e-05, 7.0946944106253795e-06, 5.2703712754009757e-06, 3.0387185688596219e-05, 3.0702674848726019e-05, 2.3082928237272426e-05, 1.688269549049437e-05, 5.6129388212866616e-06, 3.8940357626415789e-05, 6.0359798226272687e-06, 2.4988912628032267e-05, 5.1948245527455583e-06, 3.9382695831591263e-05, 3.8979425880825147e-05, 5.3167545956966933e-06, 3.7469348171725869e-05, 5.2627087825385388e-06, 2.335119825147558e-05, 3.074379128520377e-05, 5.0083776841347571e-06, 5.164193225937197e-06, 4.2728555854409933e-05, 5.8306445680500474e-06, 5.1256001825095154e-06, 5.2265172598708887e-06, 2.8134607418905944e-05, 2.7879237677552737e-05, 2.6152520149480551e-05, 5.489224804477999e-06, } };
const TfArray<32, int> quant7_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[64*1*3*32] = { 
  /* [0][0][][] */ 16,11,5,-53,2,2,47,-74,-9,-4,-6,1,3,-96,3,8,0,-4,9,-5,-1,3,3,-6,21,2,-3,-7,11,18,-47,3, 24,26,-1,-91,6,-8,46,-75,18,26,-4,-12,-9,-127,5,-35,29,-7,-8,-8,8,2,-8,3,-18,0,-4,1,-22,-4,-94,-6, -8,3,2,-51,0,6,-15,-29,14,12,-3,-5,-8,-34,1,7,4,1,-53,2,-18,-31,4,7,-23,3,3,-9,-5,-16,-64,3, 
  /* [1][0][][] */ 55,24,-7,-15,2,3,26,9,2,12,-1,-13,7,-63,-3,54,30,6,5,5,31,-27,3,-8,-26,4,4,5,8,4,2,4, -4,-17,-5,-21,3,-3,0,-1,-15,-16,1,10,5,-21,-8,-6,0,5,11,-3,19,-31,-3,-8,-42,4,-8,5,-68,6,6,-2, -83,-19,3,-21,0,-8,24,-6,-6,-35,-2,-31,5,17,0,-66,-72,2,14,2,6,-19,10,6,-9,3,-1,-6,-127,16,2,-6, 
  /* [2][0][][] */ 19,57,8,9,4,0,58,35,-11,34,11,-78,3,42,5,59,-16,-6,55,10,6,-46,4,6,-23,-2,9,1,6,41,42,-1, -76,-7,-7,-58,6,4,-45,12,-42,27,11,-30,-1,-46,4,22,-37,-6,-38,7,-8,-13,12,5,-5,-2,-6,11,-127,26,-39,-2, -106,-76,4,7,8,-1,-81,-55,-76,18,-9,-47,3,-74,-4,27,-121,-7,-87,0,-46,-29,14,-9,39,-1,-7,1,-88,0,-84,4, 
  /* [3][0][][] */ -46,-25,-3,-69,2,-2,39,-81,-52,-26,-3,-62,-8,-73,-8,93,-85,-2,-127,-4,21,59,-6,6,-20,-9,-3,-3,-23,-32,-84,-8, 0,-78,8,9,7,9,19,-69,2,-39,-5,27,-9,-79,9,-38,32,9,-62,4,-20,-4,-6,-2,-3,-3,-6,9,-6,-84,-73,-2, 19,8,-2,-22,0,-2,-57,-16,15,33,3,19,-3,-4,-3,23,8,1,-44,6,-45,-53,-3,-2,-21,7,-7,7,54,-5,-42,-4, 
  /* [4][0][][] */ -83,-125,-8,49,8,-3,-30,-51,-41,-24,0,-16,3,9,3,-40,-65,10,-7,2,-59,34,-9,-1,72,-5,-2,0,-43,-62,2,10, -10,-76,1,-33,-8,-3,-43,-12,-19,8,8,38,-4,-21,-1,15,14,1,-84,2,-41,-33,0,5,-43,7,4,10,3,-127,-28,0, 37,-25,3,-42,-2,-1,-35,21,40,17,4,-7,9,-19,-4,32,54,-6,5,-7,46,-16,1,-7,-31,-7,1,9,6,58,-41,5, 
  /* [5][0][][] */ 0,48,-7,-43,-3,13,-39,39,38,13,-4,-75,-6,-28,-1,30,12,4,92,13,1,24,3,0,39,9,12,9,-4,34,-80,6, 25,49,-6,-83,-14,-8,-35,60,57,28,-9,20,1,-111,5,56,54,13,-3,3,-3,-76,-7,-11,-14,-11,13,8,-6,-17,-118,10, 37,82,12,-58,19,14,55,-127,-14,12,-12,-90,-13,-94,13,-52,-114,8,11,1,-25,-66,1,12,25,1,2,13,-9,7,-125,13, 
  /* [6][0][][] */ -15,-35,3,81,-6,6,1,-94,-10,-14,-8,-53,1,86,7,-43,-70,6,-7,5,-15,-10,-3,9,-4,5,0,5,-12,-71,65,-4, 3,17,7,-35,-2,6,77,-9,-4,12,-6,-48,4,-53,9,-90,-42,5,31,0,29,2,3,6,5,10,4,-6,-3,0,-58,8, 74,39,-13,-112,6,-7,-7,57,22,4,-9,-42,12,-127,-3,8,29,-13,-28,-13,46,-11,3,-2,-63,-7,10,-5,-21,-9,-30,-6, 
  /* [7][0][][] */ 9,-52,15,18,-16,13,-101,17,3,-20,12,-18,15,-22,-14,-120,58,-5,-31,0,-25,-113,11,2,23,3,-8,-9,-2,-82,27,8, -44,-6,-8,-16,16,9,16,56,-16,31,9,59,11,33,14,-42,-25,12,29,15,-35,-110,1,9,-103,10,-12,8,-61,-18,46,14, -103,18,17,-56,6,-2,9,-1,-50,-12,3,120,11,41,-11,-25,-116,7,-11,-11,-60,-77,-7,-15,-87,-10,2,14,-127,-74,61,21, 
  /* [8][0][][] */ 10,16,-2,-4,-5,0,19,-79,-7,5,-1,-96,2,-92,-3,-70,3,-4,-26,-5,2,-2,6,-5,-26,-3,-5,3,16,15,-62,1, 50,21,4,-38,-9,2,27,-56,7,4,-2,-92,-8,-26,4,-38,5,4,-24,3,17,2,-4,-3,2,5,-3,-2,-11,19,-56,0, -77,-19,-6,-6,-4,1,-127,47,11,-13,-6,43,2,31,7,-6,-9,0,20,-6,-46,-82,4,5,-11,-2,6,-5,-52,1,5,3, 
  /* [9][0][][] */ 36,-72,0,-30,-10,4,-69,-65,-118,-51,-3,-64,-4,-55,-8,-101,-12,4,-95,-7,-86,7,6,-7,72,12,7,4,32,-9,-75,-3, 1,-93,13,49,-8,6,-127,-52,-35,-35,0,-49,10,-25,7,-119,35,9,22,3,-45,-32,4,-3,-40,13,-8,2,42,-84,-30,-5, -2,-67,3,68,-5,7,-36,1,19,-28,-6,-92,8,47,8,-18,-18,4,30,-1,26,-13,2,4,-43,-1,6,3,-30,-1,39,11, 
  /* [10][0][][] */ -71,-20,38,31,-15,-33,-53,-93,-46,-11,-54,-27,-18,-5,23,-38,-43,-47,-69,-21,-9,-55,-23,31,-52,35,13,-34,-1,-44,3,-50, -20,-91,-32,-39,-42,-39,-127,-27,-83,-41,29,-101,-26,-46,-27,-33,-18,-48,-69,13,-43,-35,19,49,-34,41,-17,-28,-66,-66,-25,-51, -25,-55,-33,-32,12,-18,-63,-44,-78,-39,20,-27,-11,12,5,-92,-83,57,13,48,-43,-70,-32,-38,-26,-23,47,-41,-43,-79,-31,45, 
  /* [11][0][][] */ -39,-91,-3,34,1,11,16,-40,-61,-42,8,-42,-8,18,-7,22,4,8,-2,-3,-8,-53,-2,2,-3,-3,10,-11,-31,-78,20,7, -17,37,-5,-1,-2,-12,39,-90,-8,6,-11,-17,-7,-11,6,-92,-22,8,-4,-8,-1,-50,-6,10,1,-7,-7,10,24,-1,-39,4, 31,34,-6,-26,2,-8,81,-27,23,0,-7,-28,10,2,-5,-127,41,-6,40,8,32,18,-11,8,-43,0,0,7,-25,25,-43,-1, 
  /* [12][0][][] */ -15,34,-7,-26,-6,-4,-113,48,23,4,9,-28,-8,6,-2,0,72,-3,1,-7,-16,-43,-6,-3,68,3,4,10,-46,55,15,9, -53,-8,-13,-18,0,7,-81,42,1,27,9,35,10,-15,2,31,-8,11,-41,1,-5,-61,6,3,58,-2,-2,4,-66,-19,31,-10, -127,-36,6,16,-4,-2,-89,-37,-83,-12,-1,-40,-2,30,1,7,-66,10,-40,1,-39,3,-4,-2,-62,-6,1,8,-104,-88,22,-3, 
  /* [13][0][][] */ 38,-103,-13,-1,-27,2,-36,-55,2,-10,14,-13,7,-127,5,-17,-4,12,-92,6,-86,4,-11,8,12,-1,-4,-8,-19,-126,-96,13, 59,26,-3,-115,-17,-13,-48,55,36,15,10,2,2,-48,18,32,63,-16,-8,-8,29,21,-11,2,42,-14,7,5,-32,31,-12,12, -72,4,-10,-42,-3,-8,-16,61,-16,11,6,-89,-9,86,-5,-5,-48,8,70,7,37,-30,-12,2,-28,-9,4,-15,-44,40,71,7, 
  /* [14][0][][] */ -73,-99,1,84,-15,-6,-85,-65,-53,-16,10,-110,14,-14,12,-63,-44,12,-19,-9,29,-83,7,-2,-2,12,9,-18,-108,-82,-40,6, -34,-2,-2,39,2,7,-4,-74,-64,5,15,34,-2,-64,6,-22,17,-10,-56,-9,-21,-14,17,-12,-93,-14,1,-10,46,-112,-14,12, 3,8,13,-3,-15,1,-14,-62,-1,-47,-18,36,3,-18,-7,-3,8,2,-64,-12,-23,21,20,-4,-84,0,-1,-12,82,-127,0,1, 
  /* [15][0][][] */ -5,4,-5,-15,8,-6,13,-5,-1,9,6,-28,-4,-50,9,27,-36,-5,-47,5,5,-48,8,-4,-65,-4,3,3,-21,-5,-13,11, 51,13,-9,-87,-11,-4,-9,19,0,31,10,16,0,-96,-1,51,53,6,-43,0,28,-13,8,-8,-50,3,-2,7,-1,-25,-17,8, 20,11,5,-47,14,-5,-28,34,10,14,-4,2,10,15,-3,4,-10,0,26,-11,19,-48,9,2,-127,3,-6,-1,-19,2,28,8, 
  /* [16][0][][] */ -38,-69,-11,-127,-60,60,-115,-29,3,-41,27,-25,0,-68,7,-54,-4,26,-34,-13,-81,-19,-56,-39,-60,-19,-12,-54,6,-18,6,53, -85,3,57,-17,-58,31,-66,-40,0,36,44,-122,10,-33,-3,0,-29,51,-98,-50,-21,-59,-26,-22,-126,-31,-31,-80,-39,-48,-37,-59, 4,49,19,1,-32,61,-74,-44,24,48,-31,-30,-54,-50,-43,29,-36,-30,-3,-41,-57,-16,-25,-8,-103,57,24,13,-24,2,-64,41, 
  /* [17][0][][] */ 90,29,-4,-24,4,0,41,-41,-1,-17,0,-127,-2,-21,5,-93,15,-5,-6,5,35,9,1,-7,-34,-2,2,5,35,24,-28,-1, -44,-4,0,25,-9,-2,-46,-18,8,-19,-5,-45,-6,6,-4,-11,-35,-6,-4,-3,-4,-28,-3,4,-13,-8,5,2,-39,-13,17,4, -35,-24,4,6,3,-2,-89,24,4,10,-1,51,2,-5,-2,19,31,0,15,1,-18,-60,5,3,-37,7,6,7,-18,-40,-3,5, 
  /* [18][0][][] */ -56,-2,4,-46,-30,17,-6,-18,-72,-87,-17,23,3,21,3,-44,-51,-28,-21,8,-17,-33,-13,20,4,19,-8,24,-127,-25,4,21, -84,-40,8,-2,-11,-42,-55,-73,-103,-50,-12,-44,-10,-27,-14,-52,-45,27,-9,-30,3,-61,25,24,-34,-15,24,1,-81,16,-36,15, -118,-70,-10,-2,32,-9,-61,-22,-96,-99,6,-37,1,-6,24,-85,-60,6,-1,-15,-54,-55,-4,-30,10,-37,-20,-35,-109,28,-7,37, 
  /* [19][0][][] */ 2,4,-23,-2,-74,26,-33,-74,22,-17,-4,-22,-61,-4,39,-43,5,57,-108,-49,-66,25,0,-40,-127,33,46,-23,-56,-16,7,46, 17,-89,4,-48,-12,39,-82,-74,-1,-49,-20,18,-54,-59,-31,-69,-31,-36,0,48,34,-48,-31,47,-113,23,30,13,-43,-1,-33,-25, -37,44,43,-2,-76,-40,-81,-20,-49,-28,12,-61,-4,-64,-43,-4,16,-41,-95,57,-35,-42,-44,-57,-103,1,54,30,8,-28,-66,11, 
  /* [20][0][][] */ 23,-85,-12,-72,-45,26,3,-17,-9,13,-47,-86,-7,-50,10,-127,26,1,-18,-16,-4,-68,0,-22,-21,-9,26,-1,10,-63,-119,24, -8,-36,-5,-18,24,11,-54,-36,-86,-45,2,-105,-16,-70,-33,-45,-79,-16,-70,22,-7,-57,14,-35,-94,51,25,-26,-15,-106,-99,25, -29,-47,-13,11,19,23,-49,0,-108,26,4,-34,5,-11,0,-11,-50,-12,-114,17,-48,-54,-5,-23,2,40,47,14,17,-102,86,1, 
  /* [21][0][][] */ 10,1,-7,1,-1,-2,9,-21,-19,14,13,-127,-9,-12,10,-52,20,10,12,-5,26,-51,-1,7,-34,10,-6,-5,39,29,-3,-12, -118,-41,2,80,5,-7,-50,13,-52,-10,2,-6,-4,35,1,-40,-55,-2,30,-5,-15,-124,5,10,-34,10,-5,-3,-78,-30,54,-4, 34,8,1,1,-1,4,-12,15,13,16,-3,43,-1,-20,-9,-2,27,-2,-22,13,10,-95,-9,4,15,2,0,6,46,-32,-12,-4, 
  /* [22][0][][] */ -43,-10,-1,58,10,-8,-43,-9,-12,21,-1,-127,0,33,8,19,1,4,27,-8,8,-14,-7,-8,-67,5,-1,1,4,20,39,8, -32,1,-1,44,-6,-10,-6,-24,-35,-34,2,-21,7,6,3,-47,-62,-1,22,1,1,-55,-5,-6,-70,-2,4,-7,-14,-72,31,2, 29,30,-8,-66,13,-5,13,-30,0,0,5,-2,4,-113,4,23,-2,-3,-47,-1,15,31,7,8,68,10,4,-7,-16,55,-66,-5, 
  /* [23][0][][] */ -108,-46,-15,-15,-30,0,-49,15,1,-13,-10,28,7,-8,0,6,-48,-1,-36,-17,-33,32,-5,-10,60,-1,-1,0,-16,-18,2,7, -65,-5,-6,-19,2,15,-38,32,41,20,12,-98,3,47,13,46,-29,0,-39,11,-21,-28,-10,-6,127,-1,6,-2,-35,5,6,5, -64,21,4,-4,9,1,-83,20,11,12,-4,-21,-10,23,8,25,-30,7,-24,8,-6,8,-7,9,56,4,13,-15,31,63,26,-11, 
  /* [24][0][][] */ -28,-11,-17,5,-40,-34,-45,-46,-25,32,33,-8,-6,-54,31,-40,-4,-34,-26,6,-30,-48,41,-46,6,-28,22,5,-7,-39,-34,48, -15,33,-29,-94,-43,16,-35,-28,-7,-45,38,44,-9,-52,29,21,-79,50,-58,25,-66,-67,-36,10,-56,-52,-43,-23,-69,-72,-44,39, -60,-66,45,-93,-9,19,-42,-44,24,11,43,-3,-36,-39,-28,-61,11,-9,-28,-15,-56,-127,43,-46,-64,5,-32,3,-9,-35,-9,5, 
  /* [25][0][][] */ -114,-5,68,37,-35,2,-24,-30,-7,14,-6,35,0,58,-31,-75,-121,56,-15,41,17,-127,70,50,24,-80,31,-65,27,-104,-78,51, -78,-64,13,-89,-72,-7,-25,-49,-59,-98,-11,64,-73,-67,-37,-87,-24,23,-7,-30,20,-18,77,20,-107,-32,-53,-55,-50,-31,-14,-1, -83,-27,-14,-75,40,34,-52,-89,-63,-116,-85,-3,-51,2,-14,-44,15,94,15,47,-76,7,-47,-82,-29,18,77,50,14,9,-45,-10, 
  /* [26][0][][] */ -11,-106,17,15,-17,-29,16,-47,-103,-72,77,-78,-49,-3,-56,-2,3,-80,-87,-14,-20,22,-36,41,-38,64,62,74,-78,-90,28,78, -96,56,-15,-86,24,-45,-75,-89,-45,-70,-74,-10,-60,-39,11,-100,-48,68,-69,72,-88,27,-63,2,-67,-51,12,-73,-71,-127,-108,20, -17,33,30,-32,-108,18,-4,-4,51,-66,71,1,-5,-41,28,37,-97,-72,19,-24,-95,-68,57,-74,-14,-71,-6,22,-45,8,-80,-59, 
  /* [27][0][][] */ -28,-124,27,-41,0,-45,-34,-8,-81,-9,-25,-23,-39,-33,-3,-90,-38,0,-40,-12,-87,-60,46,45,-19,-2,-44,38,-27,-22,-22,-9, -12,-127,-54,-55,-59,-56,-48,-40,-33,-37,-28,-56,-32,-64,7,-68,-110,-49,-16,-24,-51,-25,-20,41,-45,48,-23,16,11,-11,-50,-29, -3,-16,-53,-49,-42,2,-49,-82,-92,12,29,-46,26,-15,-30,-108,-23,-33,-89,-21,-71,-78,11,31,-49,39,44,6,-106,-120,-114,-15, 
  /* [28][0][][] */ 53,62,0,-113,4,8,49,7,-13,-8,1,-42,-6,-71,-6,-65,33,-4,-2,0,40,2,1,7,-114,0,7,-1,15,29,-21,-3, 48,36,12,1,-11,-6,-1,-53,-12,-44,-1,-103,-6,-29,1,-9,-1,4,2,3,31,-11,5,4,-25,10,-6,4,2,42,2,-2, -85,-82,12,65,-9,-4,-127,27,-13,-10,-3,51,-1,34,0,54,-41,-5,-29,-2,-52,-40,-3,9,-6,9,7,11,-30,-76,36,-8, 
  /* [29][0][][] */ -1,-86,-53,-17,-106,53,-40,-27,25,57,-79,-22,40,21,-27,-31,-9,23,-55,-14,-91,-100,-10,35,-55,39,35,-35,-107,-107,10,110, 9,-37,-55,45,50,113,-123,53,-55,68,45,-117,70,-82,-46,-121,-77,58,-48,31,52,-93,-17,15,-105,-33,77,-97,15,-47,-31,100, -127,-102,-1,-74,68,110,-14,10,51,-93,42,65,-17,-42,-57,-4,48,67,-77,15,68,58,46,62,-88,22,44,23,-69,-10,14,34, 
  /* [30][0][][] */ 7,22,6,-10,8,7,-112,2,9,-5,9,20,5,-3,9,44,-15,0,-76,-5,-38,-57,5,2,20,-4,8,-4,22,-5,19,4, -20,-12,-8,32,-10,-3,-91,-30,-27,-3,-3,37,5,12,0,1,14,-11,-36,-2,-31,-87,-7,5,27,-5,-4,-2,11,-49,0,-2, -6,2,-1,47,-7,-1,-71,-22,-4,-1,5,33,10,5,6,-44,32,0,14,7,-19,-32,2,-2,-25,1,6,-3,10,-127,37,-2, 
  /* [31][0][][] */ 20,23,5,-56,-5,6,-58,-13,18,11,-10,17,-5,-77,7,61,-17,5,-91,-1,-24,0,-2,-10,46,-10,8,4,10,13,-97,3, 23,-15,-1,-43,0,1,-127,-7,22,-11,-10,19,-6,-71,-4,34,-10,-2,-103,-7,-50,-23,-7,3,39,3,-12,-8,15,-35,-46,5, 37,-28,2,-24,14,13,-54,29,37,-14,-10,5,-10,-12,6,18,30,4,-14,-9,10,6,7,-1,16,1,0,-8,-8,-44,-19,1, 
  /* [32][0][][] */ -98,21,-12,45,4,7,80,-23,32,4,-12,-15,-10,20,-7,-32,73,6,89,-11,39,-47,3,-10,-44,10,-8,7,-88,58,4,2, -15,-11,-4,30,1,6,22,-106,-107,-38,10,-110,11,-7,9,4,-14,7,23,-13,-2,-59,-1,-13,-80,9,9,-3,-45,-7,9,-16, -19,-98,10,-33,-2,1,-41,-53,58,-36,11,-127,-7,-67,0,-33,81,-6,-70,3,-31,-68,1,-7,76,-11,-5,1,-5,-89,-87,4, 
  /* [33][0][][] */ -72,20,-24,17,-3,-31,-80,-10,95,-37,35,24,16,-92,-12,-70,6,25,-22,12,-42,-39,18,-18,-79,-1,10,9,-61,-14,-18,-27, 14,4,18,-47,-43,-16,-58,-7,12,15,4,14,4,-108,21,7,-17,38,-82,-37,-17,-30,-8,28,-24,3,-18,13,59,-41,-44,-43, -13,-39,-4,-90,-39,-41,-28,-20,43,19,-20,-66,25,-91,-26,-113,-127,-19,-31,16,-15,3,3,31,-57,-31,-6,8,13,-49,-62,-37, 
  /* [34][0][][] */ 29,34,-5,-105,-10,8,-32,21,-10,-3,8,-49,11,-17,-2,24,-10,5,-56,-10,6,-28,8,10,-97,-6,-12,-12,-25,44,-57,-2, -2,-35,-8,40,-5,-6,16,20,-41,-19,-6,-78,8,19,-8,-63,34,0,47,-14,-5,35,3,-9,-33,2,4,-6,-127,21,29,5, -81,-3,12,27,5,3,9,-53,-26,-3,-6,-14,-7,17,-4,-35,-12,-3,7,-1,-19,-8,-10,-8,-80,9,-11,-5,-84,-49,31,-2, 
  /* [35][0][][] */ 30,35,3,-77,16,9,-49,18,29,45,-5,13,8,-108,9,127,35,9,-81,7,30,-34,2,-1,-45,5,-7,-7,-10,0,-79,-12, -17,-20,0,-60,-4,-9,-15,-4,-33,16,-12,-3,12,-35,7,19,-18,10,28,10,11,-63,12,-9,-119,4,-4,-4,-6,-7,-59,-2, -47,-61,-9,9,-3,6,38,-9,-31,-16,13,-8,-11,29,0,-36,8,-11,58,-6,1,-67,-9,-7,-121,10,-1,-12,33,-5,58,10, 
  /* [36][0][][] */ 5,-91,5,34,13,-10,-83,-65,-34,-53,-6,-19,-2,-10,-11,8,32,-6,-90,3,-54,-99,9,-3,31,-2,5,-14,59,-77,-14,-5, 9,14,3,-62,4,3,-44,11,11,15,8,86,9,-3,7,46,39,6,-43,1,-25,0,12,10,-27,1,-2,8,38,-57,-17,8, -109,16,9,-4,8,-14,25,13,19,-18,10,2,9,45,-8,-102,1,-10,74,10,49,15,-10,10,0,-2,-4,-14,-30,127,-21,-13, 
  /* [37][0][][] */ -19,-33,-11,-67,-5,-11,-29,22,3,15,2,120,6,-13,2,47,14,6,-60,-4,-20,-31,-3,-3,-55,-6,10,-3,18,-53,-10,-14, -2,9,-11,-11,-15,-3,22,25,24,27,-13,-18,-9,-9,-5,-29,39,-15,49,-1,13,-33,2,11,-45,-9,1,8,-22,12,-12,8, -44,21,5,52,3,-6,26,-41,-18,-14,10,-92,-3,23,9,-96,-30,-1,55,-9,2,-77,0,7,-127,-14,-4,8,-79,56,3,-8, 
  /* [38][0][][] */ 5,5,1,-11,-1,-3,20,-69,-55,-12,-3,-109,2,-31,-7,-52,-3,0,-12,-2,29,5,9,-8,7,6,7,-2,-38,45,-13,3, -62,-66,-12,32,15,-2,7,-111,-65,-26,3,-73,-3,-16,5,-64,-21,3,18,-11,7,-30,-6,2,-16,-9,-3,-7,-65,12,-46,-1, -74,-63,7,1,17,-10,31,-60,-52,-25,0,-52,6,-1,7,-127,-75,-2,28,5,-2,6,-5,-8,-22,4,8,1,-51,-70,-18,5, 
  /* [39][0][][] */ -21,-63,-2,27,-5,-2,-48,6,-12,-10,-5,35,6,30,-1,-32,8,-3,17,1,-15,-53,-6,-1,-35,-9,-4,8,-126,5,41,1, 55,33,-1,32,0,9,26,-49,-71,-44,-7,-20,5,-1,-4,24,12,7,-13,-3,8,-34,10,3,29,-8,3,10,8,-74,3,-1, -30,-30,8,-22,3,7,4,-127,-65,-27,0,56,0,-48,-6,-64,-40,6,-28,-1,-63,-55,9,-5,-9,-7,2,9,13,-107,-39,-1, 
  /* [40][0][][] */ -16,-73,-43,17,30,49,-112,-5,-69,-34,-21,13,-39,7,13,-61,-102,-26,3,-23,-43,-54,45,38,-102,5,-19,-55,-28,-55,-44,26, -97,19,9,-50,4,35,-93,21,-38,-63,-5,-32,20,25,-31,-68,-115,11,-53,56,-81,-127,-41,-15,-107,29,-35,27,-19,-64,-25,46, 20,-25,0,-46,-16,-19,36,-3,-42,-12,37,-55,27,-64,-23,-34,-34,43,-66,-40,-34,14,-20,-41,-81,57,-50,37,-46,38,-76,20, 
  /* [41][0][][] */ 69,-62,12,-17,9,9,18,-127,-57,8,-4,-40,5,-20,-12,-82,-35,4,-17,-9,-1,74,6,-10,-23,6,-10,-6,-6,-24,-48,-2, -60,-43,2,56,2,10,50,-61,-67,7,-4,19,-4,35,0,-16,-47,8,40,-3,-6,-35,-2,-4,-32,9,0,3,-60,-92,33,-8, -18,-3,10,-12,-1,8,62,41,-3,27,-10,-55,-5,34,-5,13,2,15,2,-1,17,-40,0,3,0,-11,3,3,-81,-19,-13,-12, 
  /* [42][0][][] */ 55,37,1,-47,-1,14,59,-121,-16,-3,10,-86,-5,-79,9,-127,58,-10,22,-5,37,35,8,-4,-30,-11,-6,-4,25,39,-75,5, 12,-8,-1,-4,14,-7,15,-88,18,-13,1,-103,-10,-32,4,-36,-10,-1,-8,3,17,-53,8,6,-25,3,-12,-10,-8,19,-66,-8, -55,-69,11,22,18,-9,-42,18,2,10,-9,89,0,21,9,41,-11,-5,54,-1,-19,-88,0,12,-37,-8,6,2,-42,-74,-39,-6, 
  /* [43][0][][] */ -104,20,6,-12,-1,8,68,12,-4,3,-3,99,-7,28,0,-44,-7,8,34,-9,0,-34,10,9,-39,10,-7,-4,-47,3,9,-10, -30,12,4,-55,1,-2,23,35,14,17,0,32,-2,-22,10,-24,1,-5,36,9,1,-14,-5,-7,-65,0,-9,-9,-64,41,-2,-10, 63,22,-9,-7,8,-7,-35,-29,-7,6,10,-127,-7,-81,-3,27,-27,10,-32,3,-32,-21,2,-9,-100,-8,-3,-7,-8,7,-32,-3, 
  /* [44][0][][] */ -24,-66,8,-38,-12,0,-8,-61,-100,-29,-8,32,8,11,-2,-44,-19,-6,-45,-3,3,20,-8,6,-23,0,7,3,23,-56,21,-4, 0,-19,-4,-112,-10,7,37,-52,-37,-17,-4,38,9,-79,6,-127,14,8,-8,-10,34,39,-1,8,-34,3,-6,-10,-15,-31,-36,1, 28,-14,3,-82,3,4,7,31,69,9,-4,-4,0,-2,-1,-36,32,6,-43,3,-5,13,8,-6,40,-1,0,3,4,7,-33,8, 
  /* [45][0][][] */ -109,-31,4,-87,-52,37,36,-35,-52,-41,16,-17,-14,38,-26,-57,-42,-8,-39,-8,-45,-72,31,10,2,-26,49,23,-34,-127,-20,-40, -80,-71,32,-19,43,41,-48,-19,-108,26,-15,-96,72,-47,-30,-100,-73,37,-63,39,-61,-79,-34,-28,-38,-61,19,-70,-36,-31,-12,-31, 1,-53,-49,-74,-55,1,-63,-5,-24,24,-18,-59,-51,-23,-27,-46,-3,-59,-26,-39,-28,-63,39,10,-61,-3,14,-51,-74,-78,-8,37, 
  /* [46][0][][] */ -18,37,-9,70,2,2,-100,-16,-2,19,-6,48,0,23,9,41,-8,3,37,-1,-42,-66,4,-10,-45,5,7,8,19,15,28,5, 12,-17,1,-32,13,-1,-18,-55,-13,-14,6,27,5,-50,-8,6,-17,-7,-21,-4,-23,-3,9,-8,-5,-6,8,1,4,-17,-33,-3, 36,-17,-2,-53,-3,-2,59,-127,-32,-29,3,-32,-7,-97,7,-35,-3,8,32,7,14,28,-4,0,79,-2,7,0,2,-1,-58,-4, 
  /* [47][0][][] */ 4,-70,1,36,0,-6,27,-26,43,-19,1,-17,5,-42,12,-90,65,7,75,-7,18,51,-7,-7,82,-9,9,9,-65,-34,-74,2, 0,17,-3,4,-20,3,-1,-36,11,14,0,-71,-8,-26,-8,-51,5,16,-11,4,22,-14,-2,-12,48,0,10,-5,-42,-10,-29,-3, 50,28,16,24,-7,3,-16,-50,-13,-30,13,-127,15,1,10,-33,2,-3,-51,3,3,-36,13,-12,-7,2,7,-3,29,-8,-48,11, 
  /* [48][0][][] */ -24,7,-3,-22,8,-1,57,-7,-18,-2,3,-25,8,15,0,-62,-36,8,37,3,1,-61,-8,0,-6,-12,-6,4,-22,1,-24,-6, -127,12,-7,-20,5,-4,-34,21,6,-9,9,-64,-4,12,4,-20,-64,4,16,-4,10,-33,2,-9,-13,6,9,4,-69,69,-2,1, 14,12,8,-84,10,5,-67,49,30,7,11,-51,-4,-61,-4,26,46,-5,-31,4,0,4,-5,6,-52,-9,2,-6,-76,39,-46,-2, 
  /* [49][0][][] */ -117,-77,-2,-55,35,-2,-76,-39,-32,-59,-8,-11,24,-67,-8,-74,3,4,-127,11,-68,-37,-16,-7,-86,-48,-27,-18,-59,-46,-41,-31, -57,-85,-43,-42,28,23,-66,-36,-43,-27,-20,-15,-12,-6,26,-110,-44,21,-24,-34,-62,-100,9,26,-37,28,-18,-32,-29,-22,-85,-3, -82,-14,-35,-111,-23,-7,-114,-12,-10,-60,41,-119,-6,-73,-4,-85,-40,36,0,15,9,-19,-27,-26,-127,-48,30,-40,-90,-115,3,38, 
  /* [50][0][][] */ -78,-105,39,3,-40,14,-22,-74,-70,-16,29,25,-13,-20,19,-60,-90,26,-38,8,-53,-118,38,9,-84,-33,-14,-42,-58,-71,9,54, -33,-45,-6,-43,-40,-28,-108,-31,-19,-51,-51,45,-6,9,-35,-54,-49,-51,-59,-21,-73,-74,8,-37,-127,30,36,5,-51,-87,5,-37, -25,33,-27,15,-48,24,-44,-92,-110,-11,-13,-62,29,-32,-12,-44,-91,-27,-73,-13,-91,-52,12,5,4,-34,-27,-41,-68,-30,-11,45, 
  /* [51][0][][] */ -7,38,56,-31,-4,-48,14,79,-4,-2,12,17,82,-77,47,-32,-78,42,33,-68,40,-88,-15,70,22,-33,32,-28,43,-107,-66,7, -15,-67,9,-57,6,16,-127,-83,-5,-25,-5,-29,-65,43,23,-33,-61,-4,-72,60,-82,-99,70,-77,-5,57,-62,-9,-33,-37,-71,-11, -13,-24,-11,50,47,-18,15,-8,6,-4,7,-11,-22,-49,-11,30,9,-92,-46,2,-35,-92,-2,58,-30,54,31,-2,48,-25,-6,29, 
  /* [52][0][][] */ -39,-2,1,-11,5,16,-14,-48,-5,-18,9,-127,-1,-13,7,-126,-16,-10,12,-5,-12,-20,10,6,-58,3,6,-9,-26,17,2,-1, -40,-17,-5,111,10,1,28,-71,-60,-9,15,-60,-7,53,3,-54,-101,-7,56,-8,-37,-56,-14,-1,33,8,4,2,-30,-38,66,16, 89,-14,-4,-39,-3,-10,-3,38,38,-14,-13,-46,14,-24,8,24,28,3,-24,-5,15,-26,-2,7,78,-11,8,7,13,1,-81,0, 
  /* [53][0][][] */ 9,71,2,-23,-3,4,53,-4,8,13,0,7,10,-56,-5,2,-14,-2,24,-8,21,-20,7,-1,-28,6,-5,-5,16,25,-18,-9, 17,-1,-3,-78,9,-4,17,-44,15,16,4,-71,1,-78,-8,-20,-27,-1,1,-7,7,-6,1,7,49,5,6,6,-23,10,-56,-6, -14,-69,-10,-47,0,5,-34,7,3,-4,3,29,1,-6,5,37,-127,-2,-54,0,-12,14,-8,4,55,12,-1,2,-26,-10,-35,-8, 
  /* [54][0][][] */ -26,1,-13,-43,-12,-7,-49,20,65,11,0,125,3,-9,-6,10,-15,11,-13,7,-42,-94,-10,-4,-122,-13,0,-13,-45,2,-15,8, -28,10,-3,18,13,-2,115,14,36,31,7,-113,3,-5,0,-56,-10,-1,127,-6,-3,25,-15,-10,-81,-2,-6,-1,-95,82,-50,7, -1,-32,-8,34,13,9,20,-97,-25,7,-14,-72,2,19,13,26,-34,14,-1,2,-40,-7,-11,-5,-33,-1,-10,-3,-65,-71,0,6, 
  /* [55][0][][] */ -9,25,1,-63,-6,7,3,23,18,0,12,-1,0,0,10,-2,-53,2,-11,-5,-2,-48,4,1,-29,-6,-5,-9,-104,40,-36,-4, -64,-36,-7,13,-8,7,-60,48,-13,-2,14,-34,-5,3,9,-7,65,-2,0,4,-8,-12,7,1,-17,-1,-9,10,-127,-1,56,-3, 15,-41,-11,68,-8,10,-72,23,-82,-9,-11,-89,3,17,10,-7,-98,-7,-1,-14,-26,-106,4,6,-21,-3,1,9,-122,-61,49,-13, 
  /* [56][0][][] */ -17,19,12,-5,-13,2,33,-29,6,-13,11,78,15,14,-10,-17,-8,-3,17,9,-2,-8,-3,-9,-42,-8,1,-3,2,-22,-41,-14, 32,30,0,-40,-3,14,-4,42,25,38,5,127,-8,-23,-7,82,58,7,20,-7,4,-108,-4,10,-41,10,-6,-3,-26,-59,-11,-7, 25,-24,-11,-48,-9,-2,33,1,-9,8,-4,-5,-9,-25,0,-20,-17,0,29,-11,38,-30,-5,7,-95,-2,7,-7,-34,-13,-33,-11, 
  /* [57][0][][] */ -30,-85,-68,-113,-4,20,10,-92,-22,-48,-2,20,-11,6,-50,56,-85,-47,-112,-75,-94,-90,65,17,-13,-21,23,-53,19,-7,-98,49, -61,-63,-67,-23,-103,-29,-126,-119,-64,-70,-34,11,-10,-44,-9,-47,-37,-13,-107,-38,-88,19,-67,-60,-84,-82,14,37,-20,-10,-10,-52, -80,-74,-82,33,11,16,-127,-9,-59,-73,-52,45,-28,-105,-19,59,-85,67,-46,-88,-13,27,20,-39,16,42,-6,-18,7,-40,-40,-28, 
  /* [58][0][][] */ 25,-52,1,-23,-10,-5,8,-127,-32,5,-7,-6,10,3,0,-77,22,-9,-28,-3,8,17,1,8,18,7,-6,-5,48,-72,-26,4, -6,-123,-2,-19,0,-2,65,-70,-30,-4,2,24,12,27,-6,-86,-40,-2,17,-7,29,33,9,-1,12,5,9,5,-48,-33,-38,3, -54,-19,3,-8,8,-10,68,-16,19,32,-2,-13,0,13,4,6,-52,-7,50,-2,11,-11,-5,1,-56,10,11,-1,-61,-1,-47,6, 
  /* [59][0][][] */ 28,-22,-20,-41,30,13,32,-22,-60,-47,-29,-66,40,-109,-2,-67,3,-20,-68,9,-16,-10,50,35,-49,7,-43,7,-54,-30,-40,-18, -55,0,-41,-29,-32,-43,-65,5,-85,-26,-19,-119,6,-52,-1,-20,-103,-8,-113,-1,-19,-36,37,-43,-83,30,48,-41,-127,-41,16,18, -82,3,-3,-45,-5,-48,-109,10,35,-16,-23,-102,-31,-103,21,-38,54,-25,-93,-50,-10,-29,37,-20,33,-48,-32,-44,-83,-50,-1,-14, 
  /* [60][0][][] */ -45,-56,-14,-5,-51,36,-8,-19,-54,23,20,19,-1,21,6,-47,1,-12,-15,-30,-20,-73,17,-18,-87,16,43,-38,-17,-16,-46,41, -49,20,-53,-44,-26,52,-91,-75,-38,-66,25,-66,37,-38,-18,-45,-101,-7,-36,-5,-65,8,38,-33,-60,-40,24,13,-33,-26,-53,37, -38,-66,-27,-49,-50,23,-54,-33,-44,-31,41,-36,30,-11,-35,-20,41,-30,-70,-11,-13,-49,-19,27,-127,-23,-47,-10,-66,-85,-57,39, 
  /* [61][0][][] */ 38,36,-2,-109,7,-4,-42,31,0,19,-6,27,-1,-21,-3,50,25,5,-27,0,-7,6,-1,9,-47,9,2,-9,16,-8,-5,2, 13,22,0,-42,-3,1,9,-100,-4,-13,-8,15,-3,-48,9,4,-25,-1,-69,5,-9,-15,7,-9,-8,0,-4,5,9,-19,-93,-3, 20,37,-11,-66,1,-8,14,-122,-41,-2,-4,-49,3,-104,10,-41,-15,-5,-127,6,-4,6,-1,-8,-37,2,-6,-5,10,-35,-100,8, 
  /* [62][0][][] */ 64,-2,2,-2,-14,2,-123,14,5,2,12,-43,20,-15,-5,6,51,-7,-27,4,1,-120,7,-6,-4,-2,6,3,54,29,30,13, 10,-46,0,10,-6,3,-16,-4,-52,-16,-10,38,-15,-7,-9,-76,64,-6,-5,-2,-6,-47,4,-9,-116,3,10,-12,36,-127,27,-6, -42,13,-11,36,9,8,-29,16,-36,22,-17,47,-13,22,8,-76,-34,18,27,-14,-14,25,-4,13,-47,7,-6,14,-19,-103,55,18, 
  /* [63][0][][] */ 18,-52,-15,-49,-16,10,-44,30,-55,12,-8,27,0,64,-6,25,-70,20,-41,22,-37,-2,-4,14,-9,-21,-11,8,-15,-29,67,-17, 32,-14,2,-69,13,-8,-98,40,19,-1,-8,1,-3,-14,-16,83,31,21,-111,9,-83,-127,-15,-2,83,4,-6,6,-2,-73,15,14, 46,-25,-4,-113,4,-10,-102,30,67,-1,9,-65,18,-46,-9,6,63,19,-18,12,-34,-108,-14,-6,45,11,2,-9,13,-100,-42,8, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 64,1,3,32 } };
const TfArray<64, float> quant8_scale = { 64, { 0.018895683810114861, 0.017852216958999634, 0.010931252501904964, 0.016483506187796593, 0.014359616674482822, 0.0092334020882844925, 0.010318727232515812, 0.0081360107287764549, 0.020448386669158936, 0.013411283493041992, 0.002738043200224638, 0.014096540398895741, 0.012089496478438377, 0.0096304276958107948, 0.0070109693333506584, 0.01350035984069109, 0.0020048010628670454, 0.019243137910962105, 0.0039712521247565746, 0.0023127628955990076, 0.003515986492857337, 0.013823733665049076, 0.014427420683205128, 0.010705335065722466, 0.0026798364706337452, 0.0016938443295657635, 0.0015522233443334699, 0.0029293783009052277, 0.012265961617231369, 0.0014895331114530563, 0.014452708885073662, 0.013276581652462482, 0.010545304045081139, 0.0039969985373318195, 0.011367850936949253, 0.011129307560622692, 0.011561148799955845, 0.01199240330606699, 0.015201111324131489, 0.015729835256934166, 0.0025264157447963953, 0.01126341987401247, 0.011492639780044556, 0.013520674780011177, 0.016950512304902077, 0.0022968384437263012, 0.015190104022622108, 0.0106384651735425, 0.012832354754209518, 0.0029171174392104149, 0.0029935992788523436, 0.0018549818778410554, 0.0097101572901010513, 0.014993050135672092, 0.0093291504308581352, 0.01077987439930439, 0.010158794932067394, 0.0017549259355291724, 0.015185670927166939, 0.0028597279451787472, 0.0026334407739341259, 0.014814151450991631, 0.0083277672529220581, 0.0078493515029549599, } };
const TfArray<64, int> quant8_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[64] = { -1657, -2253, -355, 1206, 3272, -4790, -3877, -8593, -1060, 2193, -3608, -1394, -1490, -1377, -958, -1741, -2100, -1539, -3643, -2469, -2652, -1437, -1354, -2290, -4084, -4438, -1788, -3008, -672, -1176, -650, -680, 595, -1376, -229, 1053, 217, -3060, 2397, 1037, -4103, -2966, -3253, -3981, 1267, -4293, -2781, -4303, -3326, -5565, -2982, -1734, -1668, -2293, -1286, -1037, -3825, -2480, -1017, -3331, -4035, -2696, -1330, -3415, };
const TfArray<1, int> tensor_dimension9 = { 1, { 64 } };
const TfArray<64, float> quant9_scale = { 64, { 0.00035448939888738096, 0.00033491360954940319, 0.00020507397130131721, 0.00030923611484467983, 0.00026939125382341444, 0.00017322173516731709, 0.00019358278950676322, 0.00015263429668266326, 0.00038361860788427293, 0.00025160019868053496, 5.1366612751735374e-05, 0.000264455855358392, 0.00022680302208755165, 0.00018067006021738052, 0.00013152814062777907, 0.00025327128241769969, 3.7610741856042296e-05, 0.00036100775469094515, 7.450202974723652e-05, 4.3388208723627031e-05, 6.5961088694166392e-05, 0.00025933788856491446, 0.00027066326583735645, 0.00020083568233530968, 5.0274633395019919e-05, 3.1777090043760836e-05, 2.9120232284185477e-05, 5.4956122767180204e-05, 0.00023011356825008988, 2.7944142857450061e-05, 0.00027113768737763166, 0.00024907314218580723, 0.00019783344760071486, 7.4985036917496473e-05, 0.00021326470596250147, 0.00020878955547232181, 0.00021689104323741049, 0.00022498151520267129, 0.00028517795726656914, 0.00029509700834751129, 4.7396410082001239e-05, 0.00021130555251147598, 0.00021560578898061067, 0.00025365239707753062, 0.00031799732823856175, 4.3089461541967466e-05, 0.00028497146558947861, 0.00019958119082730263, 0.00024073928943835199, 5.4726104281144217e-05, 5.6160930398618802e-05, 3.4800083085428923e-05, 0.0001821658224798739, 0.00028127466794103384, 0.00017501800903119147, 0.00020223407773301005, 0.00019058241741731763, 3.2923002436291426e-05, 0.00028488828684203327, 5.3649459005100653e-05, 4.9404236051486805e-05, 0.00027791847242042422, 0.00015623171930201352, 0.00014725647633895278, } };
const TfArray<64, int> quant9_zero = { 64, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[13*448] = { 
  12, 21, 0, -22, -4, 12, 5, 18, 3, 13, 0, 8, 5, 0, -11, 22, -2, 10, -10, 1, 10, 14, -17, -1, -1, 3, 1, -5, 8, 2, 8, 11, -18, 8, 18, 5, 1, 19, 13, -4, -3, 4, 12, -21, 8, -1, 0, 1, -7, 1, -3, -2, 0, 13, 8, 14, -3, -3, 1, 1, -1, -4, 18, -2, 9, 11, 1, -36, -44, 12, -15, 15, 9, 25, 3, -5, 10, -19, -5, -2, -4, 2, -1, -2, 5, 15, 0, -3, 3, 3, 3, -1, 9, 1, 1, -28, -16, 7, 5, -20, -2, -28, -20, 3, -2, 2, 8, -3, -9, 0, -4, 4, -10, -2, -2, 2, -1, 11, 8, 15, -9, -1, -6, -1, 1, 5, 10, -3, 21, 7, -2, -26, -37, -31, 5, 8, 8, 17, -1, -22, 9, -37, -1, -13, -1, 13, -5, 0, 4, 10, -15, 10, -1, -2, 2, -5, 10, 0, 8, -8, -12, -2, 1, -32, -7, -28, 6, 14, 3, 11, 13, -13, -19, -3, -28, -11, -2, 4, -7, 2, -10, 4, -31, 3, -5, -1, -12, -5, -1, -12, 10, 8, 2, -9, 3, -16, -8, -1, -6, 1, -6, 16, 0, -55, 12, -6, -8, 6, 0, 25, -8, 1, 3, 1, -36, 4, -3, -1, -1, 2, 14, -1, 1, -23, -81, -5, -10, -21, -27, -33, -7, 2, -1, 6, 11, -21, -4, -3, -3, -39, 4, -6, 3, 3, -12, -40, -66, -2, -4, 1, -9, -4, -3, 13, 3, 16, -12, 1, 8, -19, 2, 3, -42, 6, -39, -3, 0, -18, 5, -32, 1, -26, 1, 10, -2, 1, 8, 7, -22, 8, 3, -2, 0, 4, -44, 4, 1, -39, -48, 8, -27, -33, -36, -35, -25, -9, 2, 7, -33, 0, 23, 0, -29, 10, -7, 1, -2, 1, -6, -26, -33, 7, -19, -2, -28, 2, -6, 27, 2, 3, -12, -48, 14, 7, 2, -44, -31, 9, 2, 22, 4, -18, 10, -30, -1, -23, 1, -6, 1, 2, -3, 8, -9, 10, 1, 3, -2, 1, -50, -1, 6, -9, -42, 10, -41, -43, -20, -43, 3, -4, 1, -16, -22, -33, 4, 0, -37, -15, 2, -6, -6, 2, -19, 0, -61, 7, -24, 1, -20, 0, 0, -7, 0, 9, 6, -32, -4, 2, -2, -23, -19, 10, 8, -9, 3, -22, 11, -9, 0, 5, 3, -30, -3, 2, 7, -24, -25, 36, 1, 1, 2, -2, 7, 1, 15, -29, -43, 12, -9, -5, 42, -30, 11, 12, -3, -17, 0, -5, 6, 0, -7, 2, -15, -4, -3, -1, -22, 17, -43, 8, 6, -3, -7, 0, 1, -15, 11, 23, 
  1, 29, -38, 16, 9, -7, 2, -6, -44, -56, 2, -12, -30, 0, -11, 8, 3, -44, -4, 1, -9, -70, 8, -21, 1, -1, -2, -2, -34, 0, -27, 8, -58, -1, -26, 26, 1, 6, -59, 16, 1, -61, 0, -8, 1, 0, 2, 2, -27, -5, -4, -1, -17, 0, -2, -36, 8, -1, -21, 0, -1, 5, -9, 9, -4, 16, 24, 1, -12, -4, -5, -6, -30, -52, 3, -11, 2, 15, -2, 2, 2, 19, 2, 3, -9, 3, 9, 5, -2, 1, 2, -5, 8, 2, -26, 3, 3, -7, 6, 12, 12, 7, -35, 31, -3, -4, -2, -16, 24, 1, -5, -7, 9, -5, -4, 1, -7, -22, 2, 8, 2, 1, -1, 3, -3, -13, -5, 5, -7, 9, 13, 13, 14, 4, 9, -24, -19, -33, -3, -2, -5, 0, -2, 1, -2, 3, 2, -2, -10, -1, 9, -23, 0, -3, -1, -6, -13, -2, -47, -2, 4, -1, 16, 10, -3, 10, -13, 10, -1, 2, -16, -18, 13, -3, 18, -7, -6, -5, 0, -1, 5, -5, 13, 2, -6, -1, -31, -4, -1, -11, -5, -10, 10, 11, -22, 37, -10, -12, 5, -18, -45, -13, 2, 11, -20, 5, -1, 6, -2, 9, 0, 1, -3, 5, 13, 0, -1, -1, -1, -3, 6, 2, -10, 1, 2, -3, 0, 7, 17, 7, -55, 11, -2, 2, -7, -4, -13, -1, 8, -18, -2, -6, 6, -2, 1, -13, 7, 7, 11, 1, -12, -3, 0, -15, -4, -15, 1, 3, -24, 25, 10, -7, 3, 12, 0, -5, -2, 15, -10, -6, 1, 2, 3, 4, -4, -1, -11, 3, 9, 0, 0, 1, -4, -8, 7, -2, -3, 4, -5, 0, -1, 5, 14, 8, -52, 15, -3, -7, -8, -17, -6, -1, -2, -2, -7, -10, 2, -2, -2, 13, 0, 7, 8, -3, -33, -2, 3, -10, -3, -10, 13, 2, -45, 11, -9, 10, 13, 0, 14, -7, 2, 5, -29, -42, -12, -33, -1, 6, -2, -2, -2, 14, 13, -7, 3, -1, 2, -5, 11, -2, -38, -32, -4, -8, 14, -9, -21, 2, -14, -4, 2, -1, 7, -18, -7, -3, 11, 16, -22, -5, -2, -3, 6, 9, 17, 8, -23, -1, -51, 2, -1, 1, -9, -26, 10, -11, -6, 30, -20, -8, 13, -5, 12, -12, 2, 7, -25, -29, -19, -13, 1, 6, -1, -2, -1, 7, 9, -54, -3, 0, -2, -15, 2, 0, -9, 3, 3, 9, -13, 7, -70, -28, -30, 1, -2, 13, 3, -4, 1, 0, -9, -11, -5, 2, 1, -6, 13, 11, -3, -14, -36, -1, -10, -4, -2, 16, -3, -33, 
  3, 1, 18, -11, -9, 13, 7, 10, 14, -37, -1, 6, -12, -7, 3, -9, 3, 13, -3, -2, 0, 5, 1, -23, -1, -1, 1, 0, 12, 0, 6, -23, 2, -1, -19, -12, -20, -5, -54, -24, 3, -53, -1, -21, -5, -2, -7, 7, -35, -2, -3, 0, -23, -14, 15, -49, 5, -4, -28, 1, -4, -14, 7, -10, -4, -10, -25, -16, 4, 4, 3, 1, 25, -37, 2, 14, -5, -23, 12, 3, -2, 30, 0, -1, 1, 12, -8, -20, 1, 0, -3, -3, 18, 2, 3, 1, 20, 0, -4, -7, -8, 7, 6, -39, 0, -61, 20, 4, -23, -1, 34, 10, -9, -6, -8, 1, -39, 14, 4, -22, 7, 1, -37, -2, -4, -1, 7, 4, -14, 7, 0, -10, 10, -12, -9, -7, 18, -42, 1, -17, -7, 5, 16, 6, -4, 16, -7, 1, 0, 5, -50, -3, 2, 2, -1, -6, 14, -1, 4, -5, -4, 9, -13, 10, 10, 10, -12, -16, -3, -53, 11, 2, -5, -2, -4, 3, -10, 2, 0, -2, -29, 8, 4, -15, 8, -1, -22, -1, 1, -13, -8, 7, -2, 10, 11, -7, 21, 7, -17, -11, 21, -7, 0, -3, 1, 0, 6, 3, -3, 25, -3, -3, -7, 3, -59, 2, 0, 2, -2, -6, -8, 0, -4, 2, 12, -1, -8, 5, 0, 8, -7, -34, -2, -40, 17, 5, 11, 1, -10, 0, 6, -2, 5, -2, -46, 7, 0, -35, 4, -1, -5, -2, -4, -27, -15, 2, 9, 8, 4, -58, 13, -2, 0, -11, 50, 24, -1, -2, 2, 6, 12, 2, -1, 12, 1, 0, -8, -9, -74, -2, 2, 4, -3, -10, 6, 2, 19, 1, 16, -3, 4, 2, 12, 12, -1, -18, 2, -32, 8, 3, -54, -1, -31, 5, -2, 0, 2, 2, -33, 9, 9, -20, 7, 0, -11, -5, -1, -18, -5, 0, -9, 7, 8, -19, 23, -16, -21, 4, 27, 35, -2, 1, -19, 10, -1, 5, -2, 17, -4, 0, -10, -7, -44, 3, -1, -3, 3, -8, 8, -2, 26, 4, 8, -2, -1, 1, 15, 8, -8, -12, 3, -16, -7, 11, -6, -2, -48, -2, 10, 0, 0, -1, 2, 2, 7, -21, 4, -1, -18, 2, 0, -26, -1, 5, -3, 3, 2, 20, -26, -7, -9, 4, -16, 10, 0, -8, 7, -4, 1, -11, 1, -18, 0, 4, -7, -18, -27, -18, -2, 1, 3, 2, -7, -3, -2, -13, 1, -7, 0, 3, 2, 7, -4, -13, -3, 9, -13, 8, 38, -2, 11, -9, 8, -7, 1, -6, -11, -11, 3, -3, 13, -3, 43, -3, 3, -27, -7, 9, 
  -27, 2, -20, 14, 6, -16, -31, -2, -15, -7, 0, -48, -22, 4, 13, 9, -1, -24, -2, 1, -1, -13, 31, 19, -3, 0, 3, -2, -31, -1, 13, 14, 2, 4, -10, 16, 13, -2, -5, 43, 3, -2, -20, -6, -15, -3, 3, -4, 20, -4, 0, 3, -1, 8, -21, -9, 13, 2, -8, 0, 1, -9, 5, 16, 1, 14, -26, 7, -8, -11, 4, 2, -51, 0, 4, -28, -18, 10, -1, 10, 0, -47, 4, -3, -2, -22, 11, 0, 1, 1, 1, -3, -81, 0, 6, 5, -17, -2, -9, 11, 12, 6, -2, 10, -1, 12, -59, -11, 5, 0, -16, -27, -11, -1, 3, 3, -4, -9, -1, -28, 8, -1, -9, 3, -4, -32, 6, 8, -11, 9, -7, -5, -8, 6, 9, 2, -15, 2, 4, -16, -16, 13, -6, 5, 1, -33, -4, 1, 0, -52, -10, 1, -1, -2, 3, -5, -24, -1, 8, 10, 10, -3, 6, 8, -2, 8, -18, -45, 2, -30, -6, 6, 6, -4, -27, -7, -1, 0, -4, -4, -19, -1, 9, -25, 4, -1, -53, 2, 1, -10, 4, 8, -19, 15, 8, -19, -10, 3, -19, 1, 3, -22, 0, -6, -8, 16, -7, 11, 0, -45, 3, 1, 2, -32, -34, 12, 2, -1, 0, -5, -21, 4, 11, 5, 11, 2, 10, 4, 9, 10, 3, -42, -2, -26, -18, 12, 24, 0, -24, -2, 8, 5, -5, -2, -15, 12, 6, -12, 5, -2, -43, 5, -2, -12, 9, 7, 0, 5, 13, 16, -9, 14, 3, 3, -30, -70, 3, -7, -13, 6, -4, 10, -3, -26, -4, 5, -4, -26, -18, 6, 2, 0, -2, -2, -3, 0, -13, 8, 18, 7, 8, 3, 1, 8, -10, -38, 1, 8, 2, 5, 13, -1, -11, 11, 3, -2, -5, -4, -11, 14, 11, -13, -1, 1, -12, 2, -2, -37, -11, 10, -16, 12, 10, 10, -12, 4, -15, -6, 4, -51, 3, -12, -3, 21, -10, 16, 0, -16, 5, 1, -2, -28, -24, 4, -3, 0, -3, -5, -10, -2, -19, 15, 12, 7, 6, 8, 11, 19, 3, -49, 0, -13, 12, 13, 6, -4, -47, -8, 7, 1, -3, -1, -19, 10, 15, -33, 16, 0, -18, -3, 0, -48, -42, 4, -39, 11, 8, -11, 18, 21, -8, -6, -35, 26, 2, -12, 13, 14, -9, 16, -2, 2, 1, -1, -4, -30, -45, 17, 0, 1, -1, 1, -7, -2, -16, 9, 6, 6, -2, 2, 16, 19, 19, -40, 2, -13, -13, 12, -14, 1, -16, -8, 11, 5, -3, 4, -32, 0, 15, -5, 11, 1, -1, -4, -3, -21, -22, 20, 
  1, -8, 20, -8, -2, 6, 11, -18, -30, -25, -3, 12, 19, 1, -9, 9, 1, 4, 0, -4, 4, -16, -23, -23, -2, 4, 0, -3, 2, -3, -15, 12, 15, -3, 12, -6, -18, 11, 17, -52, 2, 17, 21, -7, 3, 0, 6, 9, -6, 4, 3, 1, 5, -14, 28, -24, -24, -5, 10, 0, 5, 19, -29, 6, -12, 4, 4, -36, -38, 3, 9, -18, -37, -8, -2, 8, -17, 5, 4, -23, 0, 1, -5, 0, -1, -26, -9, -3, 2, 1, -2, 0, 16, 1, 9, 10, -15, 5, -5, -21, -10, -18, 4, -21, 3, 13, 10, 10, -15, 1, 7, 13, 12, 4, 0, 0, 1, -13, -10, -18, -25, 1, 14, 1, -3, 19, -25, -21, -10, -5, 7, -29, -37, 6, 9, -11, -24, -24, -1, 5, 14, -19, -1, -12, -2, -8, -4, -1, 3, -14, -38, 9, 1, 1, 1, 4, 2, 2, -15, -14, 0, 3, 0, -23, -19, -13, 7, -22, 1, 19, 24, 13, -11, -3, -11, -3, 19, 5, 2, 2, 3, -2, -14, 7, -29, 2, 25, -5, -1, -10, -33, -4, -12, -4, 8, 13, -7, 2, 9, -15, -23, -47, 2, 6, 21, -31, 1, -15, -4, -1, 0, -1, 2, -14, 3, 2, 0, -1, 0, -6, -8, 1, -11, -6, -19, 2, 3, -12, -30, -37, 4, -25, -1, 8, -5, 0, 0, 2, 5, 4, 16, 3, 1, -4, -9, -9, -14, 10, -20, 1, 19, 0, -3, -4, -8, 2, -17, 4, 22, -10, 2, 0, -2, -11, 1, 26, -2, 5, 7, -6, -8, -17, 2, 10, 1, 0, 3, -38, 13, 7, 3, -1, 0, -10, 11, 2, -15, -2, -29, -7, -8, -3, -16, -60, 18, -49, 0, 11, 15, 7, 11, -3, 12, 7, 20, 2, 2, -3, -6, 7, -20, -26, -38, -1, 20, 2, -3, -16, -12, -2, 0, -13, 22, 18, 10, 16, 2, -9, -16, 7, 2, -7, 7, -10, 11, -14, 1, -42, 0, 0, 9, -38, -27, 9, -1, -2, 3, -8, -5, 1, -31, 7, -25, -1, 2, 0, -34, -47, -16, -8, 0, -5, -26, 9, 3, -3, 22, 0, 14, 0, 3, 3, -6, 6, -12, -9, -43, -2, 20, 6, -5, 2, -28, -9, 6, -8, 8, -30, -51, -10, 12, -25, 10, -3, 3, -25, 3, 20, -4, -3, 2, -45, -4, -1, 7, -46, -46, -50, 3, -1, 0, -8, 7, -3, 11, 15, -27, 5, 4, -1, -38, -47, -13, -33, -1, -4, 1, -8, -3, -1, -17, -27, -3, -1, -3, 3, -43, -13, 0, 11, -44, 0, -30, -1, 0, 11, -23, -24, 
  9, -28, -26, 3, -8, -2, -9, 7, 31, -24, -3, 8, 22, 8, 6, 4, 0, -9, 2, 4, -1, -18, -40, 17, 0, 0, -4, -4, -10, 2, -5, -12, 1, -10, -38, -41, -6, -21, -3, 6, 1, -28, -7, -24, 14, -2, -4, -19, 17, 11, 0, -2, -31, 6, -23, 5, -29, 1, -19, 0, -2, 20, -18, -19, 1, -29, 0, 16, 12, -31, -4, -11, 35, -12, -2, 11, 24, 6, -3, -17, 0, -7, 0, -1, -12, -3, 11, 12, 3, 4, -3, 6, 2, -2, 12, -20, 0, -2, -16, -29, -42, -27, -32, 9, 0, -13, 1, -11, 23, -3, 15, -14, 11, 5, -7, 0, -4, 5, -18, 20, -41, 0, -42, -6, -4, 9, 5, -19, 5, -23, -34, 30, -18, 1, -8, -11, 37, -7, 0, 27, 13, 19, 1, -13, 0, 2, -1, -1, -16, 4, 19, 13, 2, 4, 3, 7, 1, 0, 1, -18, 1, -2, -8, -16, -23, -39, -35, 25, -2, 1, -22, -28, 14, -2, 29, -5, -20, 1, -5, 3, -3, -3, -17, 16, -49, 3, -17, -3, 0, 3, 3, -14, 6, -41, -37, -59, -40, -25, 8, 2, 35, -14, 1, 18, 6, 12, -4, -16, 1, -5, -3, 0, 5, 7, 18, 9, 2, 5, -1, 2, -1, 2, 1, -3, 6, -2, -10, -28, -39, -22, -13, 15, -3, -5, -7, -39, 10, -1, 20, 2, -29, 5, -5, 0, 7, 21, -4, 5, -10, 2, -24, -3, -1, -13, 7, -16, 16, -32, -30, 20, -13, -19, 17, -9, -17, -4, -1, 7, 12, 5, 1, -14, 2, -1, 0, -4, -6, 16, 16, 7, 2, 6, -3, 0, -28, -2, 9, 2, 2, -2, -10, -16, -43, -13, -34, 8, -3, 7, -11, 0, 3, 2, 16, -13, -37, -3, -5, 2, 3, 6, -19, 12, -3, -2, -18, -3, -1, -1, 9, -3, 24, -17, -54, 5, -28, -14, 21, -5, -15, -3, 0, 15, 4, -18, -11, -18, 0, -13, -5, -2, 5, 5, 21, 1, 2, -3, 2, 5, -7, 0, -6, 1, -11, -10, -15, 3, -43, -31, -19, -4, 2, -3, -4, -26, 0, 2, 27, 4, -37, -3, -7, 2, 14, -2, -30, 10, -39, -4, 4, 2, -2, 6, 12, -33, 6, -15, -28, 1, -19, 3, 12, 6, 10, -37, 3, 2, -13, -25, -11, -6, -2, 11, 1, 0, -10, 6, 5, -39, 3, -3, 3, -1, 18, -4, -27, 3, -1, -5, 3, 5, -47, -33, -7, 7, 3, -5, 13, -39, -10, -4, -21, 22, -19, -2, -5, 2, 9, 0, -16, -10, -56, 2, -14, 1, 1, -7, -8, -44, 
  15, -20, -11, -17, -5, 0, -4, -7, -6, 10, 2, -7, -7, -3, -3, -33, -1, -18, 4, -2, -1, 9, -8, 4, -3, 0, -2, 1, 9, -1, -1, -9, -25, -1, -6, -7, 8, -7, -5, 21, -3, -5, -9, 16, -3, 3, 2, 1, 12, 4, -1, -2, 5, 3, -18, 0, -42, 1, -18, 3, -3, 17, -11, -16, 4, 0, 16, 11, 5, -4, -5, -24, -4, 11, 1, 4, 5, 11, 3, -25, -1, -35, 7, -4, -2, -34, -30, 15, 2, 5, 3, -4, -18, 1, -25, -23, -14, -8, -10, -34, 12, -3, -28, 11, -3, -8, -3, 15, -19, 1, -19, 6, 10, 6, 1, -1, -15, 6, -4, -14, -33, 1, -1, -1, 2, 3, -18, -21, 5, -4, 12, -28, 16, 7, -9, -9, -4, 28, -1, -1, 4, 1, 6, -31, 0, -2, 9, 1, -4, -21, -20, 3, 0, 3, -3, 0, -26, 0, 10, -36, 0, -4, -24, -31, 30, -3, -18, 13, -1, -11, -20, 15, -26, -4, -3, 20, 14, 1, 2, -1, 6, 12, -2, -22, -16, -3, -9, -2, -2, 5, -36, -44, 7, -1, -3, -49, 10, 12, 1, -20, 6, 24, -1, -3, -37, 6, 9, -21, -2, -3, 6, 1, 0, -14, 7, 12, -2, 0, 3, -1, -2, -4, -12, -18, 9, -8, -7, -48, 6, -6, -24, -3, 0, -8, -6, 13, -50, 1, 9, -4, 12, 4, 0, 1, 9, 18, 8, -14, -25, 2, -23, 0, -1, 5, -23, -19, 13, 1, 11, -77, -24, 12, -4, -28, -4, -33, 3, -13, -45, 22, 6, -23, 2, -15, 5, -3, -6, -5, -16, 5, -2, -3, -1, -4, -1, 1, -39, -5, -16, 0, -8, -47, 15, -9, -40, -53, 0, -25, -6, 14, -60, 0, 0, -9, 24, 0, -1, -3, 4, 9, -7, -3, -40, 0, -3, -1, 1, 10, -12, -31, 12, 12, 6, -34, -65, 22, 7, -24, -16, -43, 1, -23, -32, -26, 4, -13, 0, -16, 7, 1, -5, -27, -13, -10, -2, -2, 0, -4, 10, -2, -30, 0, -2, 2, 7, -21, -35, -26, 6, -28, 0, -12, 2, 5, -38, 2, 15, 9, 23, -1, -1, 1, -13, 17, 5, -14, -30, -3, -6, -3, -4, 18, -25, -33, 12, 4, -4, -28, -57, 4, 3, -28, 10, -12, 1, -26, -10, 9, -9, 3, -3, 7, 9, -1, -3, 0, -32, -18, 0, -1, -1, 3, 12, 1, -33, 16, -4, -7, 17, -12, -46, -21, 4, -33, -3, -15, 8, 4, -29, 0, -29, 3, 6, 3, 1, 2, -13, 4, 24, 3, -35, -2, -27, -2, -4, 25, -29, -22, 
  -13, 17, 6, 13, 6, -3, -3, -23, 6, -4, -2, 11, 2, 1, -2, -35, -1, 1, 6, 1, -10, 2, -8, 7, 2, -3, -4, 4, -5, -4, -46, -6, -5, -12, 15, -9, 12, 7, 7, -16, 1, 10, 14, 10, -3, -1, -2, -7, 10, -8, -3, -2, -1, -8, 4, -6, -31, 0, 8, 0, 0, 1, -32, -36, -1, -11, 15, -51, -5, 10, -10, -33, -8, 11, -3, 17, -28, -11, -6, -39, -2, 5, 10, 3, -5, 0, 1, 9, -2, -2, 3, -4, 3, -1, -50, -16, 22, -8, 9, -23, -22, -23, 13, -31, 0, 5, 9, -22, -35, 0, -4, 0, -12, -6, -5, 0, 3, 0, 21, -7, -46, -3, 7, 2, 1, 8, -39, -31, 0, -19, -24, -9, -8, 1, -16, -12, -23, -5, -1, 15, -2, -12, 8, -36, 0, -3, 2, -1, -7, 8, -7, 16, 2, 2, 2, -3, -3, 0, -4, -20, 8, -5, 2, -38, -35, -49, 14, 0, -3, 13, 13, -69, -11, 2, -30, 4, -8, -9, -1, 0, 6, -11, 3, 7, -53, -3, 19, 2, 0, -14, 4, -15, -5, 2, 11, -6, -11, 6, -3, -8, -51, -13, 0, 11, 14, 12, 6, -41, 1, -12, 3, 0, -8, 8, 9, -1, 3, 0, 0, 6, -13, -1, -12, -53, 10, 6, 9, -3, -28, -17, 18, 8, 2, 8, 8, -58, -10, -1, -29, 18, -2, -5, -2, -1, 11, -41, 3, 5, -46, 1, 18, -1, -2, 9, 3, -15, -45, 18, -3, -9, 18, -24, -21, -11, 7, -30, 1, 4, 21, 9, 7, -41, -1, -8, 7, 0, -9, 4, 16, 10, 0, 0, 1, -1, 3, -1, 1, -78, 12, 0, 9, -30, -38, -32, 6, 25, -2, 7, 18, -39, 8, -3, -3, -1, 1, 2, -3, 0, -1, -43, 10, 5, -36, -1, 13, -2, 3, -5, -4, -29, -33, -11, -8, -1, 18, -8, -12, -2, -18, 11, 1, 2, 12, 24, -4, -21, -4, -3, 0, -2, 0, 6, 15, 17, 2, 2, 0, 3, 6, -3, 6, -27, -2, -13, 13, -12, 9, -45, -6, 10, 1, 12, 1, -22, 11, -1, -1, 6, -2, -5, -3, -1, 9, -43, -17, 10, -35, -2, 11, 1, 1, 19, 10, -21, -15, -16, 6, -3, 11, -17, -6, -6, 1, -17, -1, 4, 4, -13, -5, -31, 3, 6, 0, -1, -3, 13, 12, 16, 2, 4, -3, -2, -18, 0, 17, -7, 7, -4, 12, -44, -44, -43, -10, 6, 2, 13, -5, -19, -14, -1, 2, -6, 8, 0, 6, -6, 11, 2, -21, 17, -46, 1, 3, 2, -1, -6, 12, -13, 
  3, -12, 24, 15, 5, 6, 1, 13, -17, 12, -3, -13, -5, -4, 2, 11, 0, -19, 0, -4, 0, -17, -11, -1, 0, 0, 2, 2, -12, 2, 7, 22, 20, -7, -13, 15, -10, -10, -24, -38, -2, -47, 8, -14, 2, -2, 2, -5, -30, 0, -3, 2, -25, -12, -5, -19, 14, -2, -10, 0, 2, -6, 11, 13, -2, -40, -7, 2, 2, 5, -5, 7, 8, -16, 2, -44, -10, -16, 1, 10, 0, 5, 2, 2, -12, -35, -24, -7, -1, -2, -3, 4, 1, -2, -5, 9, 17, -9, -40, -3, -14, -12, 31, 9, 1, -32, -1, -2, 3, 0, 32, -16, -43, 4, -6, -1, -19, 2, -34, -68, 5, 0, -57, 1, -3, 17, -1, 3, 0, -29, -40, 1, 29, 17, -4, -9, -1, 36, -1, -25, -27, -1, -1, 5, 4, -28, 0, -2, -1, -29, -30, -8, -2, -1, -3, 4, -25, 1, -10, 11, -66, -4, -53, -3, -30, -3, 24, -1, -3, -28, -14, -6, 7, 0, 22, -21, -59, 2, -1, 0, 11, -2, -49, -67, 5, 1, -48, 2, -3, 27, -18, 6, -5, -32, -33, -7, 21, 11, 8, -17, -4, -11, -3, 2, -41, 14, -1, 10, 1, -31, 2, 1, 0, -35, -32, 9, 3, 0, -2, -1, 4, 1, 2, 11, -45, -6, -32, -6, 0, -14, -1, -12, -2, -17, 6, -32, -8, 3, 10, 10, -27, 2, -3, 2, 7, 4, -19, -54, 6, -1, -32, -2, 0, -4, -9, 10, 11, -18, -24, -29, -34, 11, 10, 7, -8, -35, -2, 21, -25, 2, -4, 13, 0, -18, -2, 0, 5, -37, -46, -19, -2, 3, -3, 2, -5, -1, 6, 9, 14, -9, -25, -15, 2, -11, 33, -24, 2, -12, -3, -37, -22, 2, 21, 19, -30, 2, 2, 0, -31, 20, -5, -39, 3, 0, -9, -1, -3, 9, 18, 11, 14, -18, -15, -18, -38, 26, 10, -2, -4, -70, 3, -1, -16, -28, -6, 4, 2, -29, -8, -2, 10, -43, -36, -26, -2, -4, 1, -2, -13, -1, 1, 3, -4, -1, -14, 8, -28, 3, 27, -12, -3, -31, 13, -28, 5, 1, 31, 10, -19, 0, -2, -1, -40, 21, -45, -40, 4, 2, 2, 0, 2, 7, 2, 6, 17, 3, -12, 46, 15, 5, 16, -28, 9, -25, 1, 2, -25, 4, 0, 5, 0, 8, -3, -1, -2, -19, -18, -33, -1, 0, 2, -3, 8, -1, -1, 15, -48, 5, -4, 1, -11, -7, 3, -36, 3, -6, 10, -32, 24, 0, 11, 16, -16, -2, 2, -1, -17, 3, -30, -12, 8, 2, 33, -3, -1, 15, -22, -16, 
  -3, -10, 12, 1, -5, -21, -8, 7, 5, 6, 0, -1, 18, 5, -3, -36, -4, 15, 2, 0, -2, 11, 14, 7, -1, 2, -2, -5, 12, -2, 5, -50, -6, -9, 6, -17, -1, -12, -5, 5, 0, 3, -11, 19, 3, 3, 7, 11, -19, -1, -5, -4, 5, 8, -21, 9, 4, -4, 2, 3, -1, -11, 4, -6, 2, -23, -13, -27, -1, -17, -34, 6, 0, 11, -3, -19, 0, -28, 0, -23, -4, 5, -1, 1, 0, 7, 0, 10, -2, 0, 1, -5, 6, 3, 12, -21, 3, -11, -14, -11, 9, 11, -1, -7, 0, 0, -3, 13, -39, -4, -78, 5, -15, 7, 8, 2, 4, 3, 1, 4, 7, -3, -20, -2, -1, -26, 3, -4, -14, -21, -4, 12, -19, -30, -48, 6, 7, 15, -1, -17, -1, -33, 2, -30, -1, 7, 0, -2, -7, 9, 2, -1, -1, 2, 3, 2, 13, 2, -1, -41, -4, -6, 5, -13, 13, 9, -27, -19, 5, 2, -9, 14, -31, 1, 24, -22, -8, 4, 5, 2, 7, -23, 6, 2, 4, 0, 0, 0, -1, -23, 6, -7, -63, -14, 2, -27, -34, -21, -47, 17, -27, 6, 1, -26, -5, -68, -2, -47, -3, 6, 6, -1, -4, 6, 2, -13, 0, -1, -2, 3, 17, 2, 2, -13, 12, -1, 7, -13, -6, 5, 1, -15, 2, 4, -2, 8, -76, 2, 10, 3, -3, 9, 4, 2, 0, 7, 7, 7, 2, 1, -4, -2, 2, -10, 4, -12, -52, -4, -8, 3, -2, -8, -23, 14, -15, -15, 2, -21, -17, -42, -4, -37, 0, 9, 6, 0, -1, 5, -3, -8, 2, -1, -1, 4, 13, 2, -17, 6, 5, 5, -9, 4, -7, 8, 16, 2, -3, 2, 1, 14, -19, 2, -1, -4, 1, 5, 4, -4, 9, -45, 4, 3, 6, 0, -13, 2, 2, 4, -5, -1, -21, -5, -23, -5, 14, -42, -30, 7, -29, 10, -2, -2, 6, -4, 10, -37, -3, 21, -1, -2, -1, -1, 6, -20, -3, 0, 1, 1, 12, -3, -1, -17, 9, -9, 1, -14, 20, 10, 1, 7, -3, 3, 1, 11, 2, 2, -18, 5, -12, 6, 6, 2, -2, -41, -1, 3, 12, -2, 13, 2, -1, -29, 4, 9, -15, -9, -2, 0, 11, -23, -15, 1, -10, -2, -3, 6, -2, 0, 9, -38, -3, -6, 3, -2, 2, 8, 8, -30, -3, 0, -2, 0, -9, 2, -32, -47, 6, -8, -11, -27, -10, 16, -5, 9, 2, -1, -6, 11, 18, 1, 5, 4, -2, 0, -1, -2, 8, -39, 16, 0, 1, 1, 9, 0, -3, -19, -3, -19, 
  -2, -11, -20, -29, -2, -2, 13, -22, -18, 2, 0, 4, -36, -2, -26, 4, -1, -17, -5, -1, -2, 0, -8, 1, -1, 1, 3, -7, -3, 1, -17, -15, 0, -9, 0, -4, 22, 1, -1, -20, 2, 13, -15, 25, -12, -2, -13, 3, 14, -10, 0, 2, 14, 5, 7, 4, -2, 1, 8, -2, 0, -17, -22, 0, 1, -5, 1, -12, -17, 15, 15, 3, -7, -7, -4, 11, 5, -36, -7, 12, 0, -10, -3, 2, -3, 0, -15, -15, 3, 0, 0, -3, 7, 3, 12, 15, -19, 1, -13, 11, -4, -21, -4, -10, 0, 12, 8, 17, -22, 0, -27, 3, 12, -11, -1, 2, 11, -7, -3, -13, 12, 0, 11, 7, 1, -5, -5, 5, -18, -8, 11, -32, -23, 7, 13, 7, -18, -16, 3, 17, -6, -13, -11, 11, 0, -20, 3, 1, 6, -6, -18, -43, 0, 3, -3, 3, -2, -4, 10, 12, -8, 5, -12, 9, 2, -5, -3, -27, -1, 5, -2, 14, -33, -2, -16, -6, 5, -10, -3, 1, -8, 2, 3, -13, 11, 2, 16, 4, 1, 7, 10, 1, -29, -25, 0, 30, -34, -9, 8, 11, -40, 3, -1, 14, 6, -28, -12, 7, 0, -16, -4, 2, 0, -10, -3, -28, 2, 3, 0, -4, -36, 2, 7, 8, -20, -1, -12, 8, -9, -1, -11, 7, -1, -3, -25, 0, -24, -5, 9, -16, -4, -6, -3, -1, -4, -27, -39, -21, 1, -3, 11, 5, 0, 14, 8, 8, -26, -47, -53, 2, -27, -13, -3, 5, -38, 33, -1, 15, -10, -1, -9, 7, -4, -54, -2, -1, -6, -22, -35, -55, 0, 2, -1, -7, -52, 3, 15, 8, -95, -1, -19, 13, -13, 5, 19, -9, -2, 9, -23, 27, 16, 0, 26, -25, 8, -5, 3, 0, 4, -63, -11, -19, 6, 2, 28, -1, -1, 21, 3, 3, -37, -43, -36, -12, -15, -15, 14, -2, -31, 1, 2, 14, -4, -19, -3, 5, -3, -32, 2, 1, -3, -24, -8, -27, 2, 2, -1, -6, -41, -2, 7, -1, -53, 8, -29, 10, -14, -2, -3, -13, 1, 23, -17, 14, 1, 1, 15, 3, 9, -3, 2, 0, 11, -24, -9, -36, 15, -3, 31, 1, -1, 1, 6, 6, -33, 13, 1, -15, 19, 9, -9, 15, -28, 21, 2, -8, 3, -13, -3, 1, 0, -24, -2, 2, -6, -43, -39, -47, 0, -2, 0, 5, -24, -2, 16, -10, -5, -3, -32, 9, 15, 14, -2, -25, 3, -34, -6, 13, -13, 1, 5, -6, 0, -1, -3, -6, -53, -23, -23, -36, 24, -3, 3, -1, -3, -8, 16, 20, 
  -20, -23, -14, -31, 6, -13, -5, -25, -2, 9, 1, -5, -18, -5, -8, -14, -4, 5, 0, -2, 6, 9, 14, 2, 1, -1, 1, -5, 9, -3, 9, -21, -3, 5, 3, -26, -7, 1, 2, 4, -1, 3, -16, 0, -21, 3, 0, -19, 13, 2, 1, -2, 11, -12, -3, 6, -18, 0, -14, 1, 2, 2, 5, -3, -15, 26, -33, 0, 22, 1, 20, 4, 10, -4, -3, -23, -13, 7, 4, 10, -3, 3, -9, 0, 4, 3, 6, -8, 0, -1, -1, -7, 8, 2, -6, -3, -18, 7, 25, 22, 5, 7, -3, -4, 1, -1, -9, -17, -21, 0, -6, -16, 4, 0, -9, -3, 13, -8, 6, 7, 6, -2, -10, -1, -2, -4, -2, 2, -6, 6, -3, -27, 16, -20, -4, -3, -22, 20, -2, -37, -5, 9, -13, 4, 0, 3, -5, 0, 7, 2, 24, -12, -1, 1, 0, -7, 2, 0, -1, 4, 6, 2, 10, 9, -1, 0, -1, -31, -6, 2, -3, -19, -30, -2, -8, 1, 2, -6, -11, 0, 4, -15, -4, 8, 2, 3, -18, -3, 0, 1, -3, -3, -35, 3, 6, -40, 29, -15, 23, -17, 13, 3, -1, -34, 0, 14, 1, -3, 1, 0, -4, -1, 5, 4, 7, -6, -3, -1, -3, -7, 10, -2, -15, 2, 1, -1, 7, 6, 15, 6, 10, -4, -3, 4, 4, -9, -26, -5, -19, -7, -11, -8, -9, 1, 19, -9, 7, 3, -1, -3, -16, -2, -1, 14, -12, -2, -59, -1, -12, -8, 16, -3, 7, -21, -24, 14, 3, -20, -4, 3, -6, 4, -2, 10, -2, -3, 1, 11, 6, -18, -3, -2, -2, -8, 10, -1, -11, -2, 2, -7, 11, 6, 19, 4, -6, 7, -2, -3, -9, -30, -1, -3, -33, -8, -22, -9, -3, 0, 10, -36, -2, 6, 0, 3, -35, 0, 1, -31, 6, 1, -30, 5, -4, -11, 3, 9, -11, -8, -19, -14, 3, -11, -5, 11, 6, 9, -2, -1, -3, 3, -13, 8, 0, -6, 2, 1, 1, -6, 0, 2, -10, -13, 9, -13, 1, -3, 3, 0, 2, 12, -2, 8, 7, -41, -7, -3, -14, -22, -36, -4, -13, 0, 6, -45, 5, 2, -7, -2, -2, 1, 1, -7, 2, 0, -16, 9, -10, -22, 15, -5, -10, -5, -35, 8, -3, 8, -14, -25, -10, -9, -2, 14, 0, 0, -2, 13, 10, -27, 1, 1, 2, -9, 2, 0, 12, -18, 7, -4, -4, 9, -47, -38, -11, 2, 1, 8, -4, 5, -32, -1, 0, 3, 7, -4, -2, -5, 10, -10, -4, -6, -27, 3, -24, 0, 2, 7, 1, -31, 
  0, 6, 6, -8, -17, -5, -19, -8, -17, -47, 1, 0, -21, -18, 3, -23, -2, -13, 0, 1, 2, -76, -53, -20, 0, -1, -2, -1, -3, -2, -5, 16, -6, 7, -20, 8, -34, -37, 54, -35, -2, -35, -16, -23, 12, 3, -8, -55, -16, 0, 1, -3, -127, 18, -13, -35, -14, -5, -28, 3, 1, 6, -21, -22, -7, -39, -54, 13, -3, -33, -5, -8, -24, -11, -2, -2, -38, -22, 14, 1, 4, -22, -7, 2, 5, -43, -79, -68, -2, -2, -1, -2, -9, -1, -23, -12, 13, -1, -8, -6, -69, -40, 27, -4, 0, -19, -31, -24, 23, -3, -54, -24, -45, 1, -4, -3, -64, -11, -19, -59, -10, 1, 23, 3, -1, 6, -23, -37, -1, -12, -15, 27, 13, 2, 5, -12, -21, -34, 2, 9, -34, 3, -1, 17, 2, -31, 1, -4, 3, -38, -41, 8, 2, -2, -1, -7, -11, -3, -19, -22, -96, -3, -20, -2, -19, -11, 13, -15, -2, -22, -2, -39, 24, -1, -26, 18, -25, 0, 1, 1, -59, -2, -27, -37, -16, 0, 25, -1, 3, 20, -23, -35, 17, 1, -14, 42, 19, -21, 8, -7, -16, 22, -5, -19, -32, -8, 6, -17, 1, -21, 5, -1, 1, -31, -41, 10, 0, -2, -3, -2, 1, -1, -9, -14, -15, -5, 22, -5, -39, -30, 16, -18, 3, -27, 8, -37, 14, -2, -33, -11, -9, -3, 0, -3, -50, 3, -32, -31, -27, 3, 19, 0, -4, 19, -17, -28, 13, -9, -17, 24, -23, -13, -3, -9, -21, 46, -2, -31, -49, -6, -2, -14, 2, -30, -4, -1, 3, -26, -54, -8, 1, -1, -1, -7, -8, 2, -14, 1, 19, -7, 5, 10, -27, -17, 25, 8, -2, -20, -13, -38, 3, -4, -51, -26, -16, -2, -2, 0, -45, 0, -4, -29, -18, -2, 12, -1, 0, 5, -19, -19, -16, -20, -15, -6, 22, 1, -5, -15, -4, 31, -1, 11, -32, -1, 21, 6, -4, -27, -1, 1, -4, -35, -43, -17, 2, -1, -2, -1, -5, -1, -32, -1, -3, -2, -1, -14, -8, -15, 16, -2, -3, -20, -14, -30, 3, -1, -36, -18, -26, 0, 1, -2, -34, 1, -10, -32, -26, 0, -33, 0, 1, 13, -22, -21, 27, -26, -36, -1, 17, 4, 0, -32, 23, 14, 2, 5, -42, 37, -1, 14, 0, -3, 1, -3, 5, -14, -14, 6, 1, 2, 1, -1, 15, -4, -17, -20, -14, -7, -6, -8, -9, -22, 19, -14, 3, -2, 9, -42, 5, -1, -13, 13, -30, -3, 0, -2, -12, 8, 2, -32, -20, -3, 13, -1, -3, -3, -28, -27, 
};
const TfArray<2, int> tensor_dimension10 = { 2, { 13,448 } };
const TfArray<1, float> quant10_scale = { 1, { 0.03565504401922226, } };
const TfArray<1, int> quant10_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[13] = { 136, -192, 96, 22, -230, 146, 222, 259, -529, -21, -115, -378, 893, };
const TfArray<1, int> tensor_dimension11 = { 1, { 13 } };
const TfArray<1, float> quant11_scale = { 1, { 0.0016552024753764272, } };
const TfArray<1, int> quant11_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,26,32 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0032935049384832382, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,26,32 } };
const TfArray<1, float> quant13_scale = { 1, { 0.018760336562991142, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,26,1,32 } };
const TfArray<1, float> quant14_scale = { 1, { 0.018760336562991142, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant15_scale = { 1, { 0.018760336562991142, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,13,32 } };
const TfArray<1, float> quant16_scale = { 1, { 0.018760336562991142, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,13,64 } };
const TfArray<1, float> quant17_scale = { 1, { 0.046422675251960754, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,13,1,64 } };
const TfArray<1, float> quant18_scale = { 1, { 0.046422675251960754, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,7,1,64 } };
const TfArray<1, float> quant19_scale = { 1, { 0.046422675251960754, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,448 } };
const TfArray<1, float> quant20_scale = { 1, { 0.046422675251960754, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,13 } };
const TfArray<1, float> quant21_scale = { 1, { 0.80789917707443237, } };
const TfArray<1, int> quant21_zero = { 1, { 60 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,13 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,1 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,7 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,2 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,3 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,8,9 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,4 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,5 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,10,11 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension0, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 6144, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 256, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 5824, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 52, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension13, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension15, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension17, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 832, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 832, (TfLiteIntArray*)&tensor_dimension19, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 448, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 448, (TfLiteIntArray*)&tensor_dimension21, 13, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 13, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
